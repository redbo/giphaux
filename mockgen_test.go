// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redbo/giphaux/shared (interfaces: DataStore)

// Package giphaux is a generated GoMock package.
package giphaux

import (
	gomock "github.com/golang/mock/gomock"
	shared "github.com/redbo/giphaux/shared"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AddCategory mocks base method
func (m *MockDataStore) AddCategory(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockDataStoreMockRecorder) AddCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockDataStore)(nil).AddCategory), arg0, arg1)
}

// AddFavorite mocks base method
func (m *MockDataStore) AddFavorite(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavorite", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavorite indicates an expected call of AddFavorite
func (mr *MockDataStoreMockRecorder) AddFavorite(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavorite", reflect.TypeOf((*MockDataStore)(nil).AddFavorite), arg0, arg1, arg2)
}

// AddGIF mocks base method
func (m *MockDataStore) AddGIF(arg0, arg1 string, arg2, arg3 []string, arg4, arg5 string, arg6, arg7, arg8, arg9 int, arg10 []byte) (*shared.GIF, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGIF", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(*shared.GIF)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGIF indicates an expected call of AddGIF
func (mr *MockDataStoreMockRecorder) AddGIF(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGIF", reflect.TypeOf((*MockDataStore)(nil).AddGIF), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// Frontpage mocks base method
func (m *MockDataStore) Frontpage() (*shared.FrontPageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Frontpage")
	ret0, _ := ret[0].(*shared.FrontPageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Frontpage indicates an expected call of Frontpage
func (mr *MockDataStoreMockRecorder) Frontpage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frontpage", reflect.TypeOf((*MockDataStore)(nil).Frontpage))
}

// GIFByID mocks base method
func (m *MockDataStore) GIFByID(arg0 string) (*shared.GIF, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GIFByID", arg0)
	ret0, _ := ret[0].(*shared.GIF)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GIFByID indicates an expected call of GIFByID
func (mr *MockDataStoreMockRecorder) GIFByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GIFByID", reflect.TypeOf((*MockDataStore)(nil).GIFByID), arg0)
}

// GIFData mocks base method
func (m *MockDataStore) GIFData(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GIFData", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GIFData indicates an expected call of GIFData
func (mr *MockDataStoreMockRecorder) GIFData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GIFData", reflect.TypeOf((*MockDataStore)(nil).GIFData), arg0)
}

// GIFsByID mocks base method
func (m *MockDataStore) GIFsByID(arg0 []string, arg1, arg2 int) ([]*shared.GIF, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GIFsByID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*shared.GIF)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GIFsByID indicates an expected call of GIFsByID
func (mr *MockDataStoreMockRecorder) GIFsByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GIFsByID", reflect.TypeOf((*MockDataStore)(nil).GIFsByID), arg0, arg1, arg2)
}

// GetUser mocks base method
func (m *MockDataStore) GetUser(arg0 string) (*shared.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*shared.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockDataStoreMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDataStore)(nil).GetUser), arg0)
}

// GetUserByCookie mocks base method
func (m *MockDataStore) GetUserByCookie(arg0 string) (*shared.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCookie", arg0)
	ret0, _ := ret[0].(*shared.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCookie indicates an expected call of GetUserByCookie
func (mr *MockDataStoreMockRecorder) GetUserByCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCookie", reflect.TypeOf((*MockDataStore)(nil).GetUserByCookie), arg0)
}

// GetUserByKey mocks base method
func (m *MockDataStore) GetUserByKey(arg0 string) (*shared.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByKey", arg0)
	ret0, _ := ret[0].(*shared.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByKey indicates an expected call of GetUserByKey
func (mr *MockDataStoreMockRecorder) GetUserByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByKey", reflect.TypeOf((*MockDataStore)(nil).GetUserByKey), arg0)
}

// NewUser mocks base method
func (m *MockDataStore) NewUser(arg0, arg1 string) (*shared.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0, arg1)
	ret0, _ := ret[0].(*shared.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser
func (mr *MockDataStoreMockRecorder) NewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockDataStore)(nil).NewUser), arg0, arg1)
}

// RandomByTag mocks base method
func (m *MockDataStore) RandomByTag(arg0, arg1 string) (*shared.GIF, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomByTag", arg0, arg1)
	ret0, _ := ret[0].(*shared.GIF)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomByTag indicates an expected call of RandomByTag
func (mr *MockDataStoreMockRecorder) RandomByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomByTag", reflect.TypeOf((*MockDataStore)(nil).RandomByTag), arg0, arg1)
}

// RandomID mocks base method
func (m *MockDataStore) RandomID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RandomID indicates an expected call of RandomID
func (mr *MockDataStoreMockRecorder) RandomID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomID", reflect.TypeOf((*MockDataStore)(nil).RandomID))
}

// RandomSearch mocks base method
func (m *MockDataStore) RandomSearch(arg0 string, arg1 int) (*shared.GIF, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomSearch", arg0, arg1)
	ret0, _ := ret[0].(*shared.GIF)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomSearch indicates an expected call of RandomSearch
func (mr *MockDataStoreMockRecorder) RandomSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomSearch", reflect.TypeOf((*MockDataStore)(nil).RandomSearch), arg0, arg1)
}

// RemoveCategory mocks base method
func (m *MockDataStore) RemoveCategory(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategory indicates an expected call of RemoveCategory
func (mr *MockDataStoreMockRecorder) RemoveCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategory", reflect.TypeOf((*MockDataStore)(nil).RemoveCategory), arg0, arg1)
}

// RemoveFavorite mocks base method
func (m *MockDataStore) RemoveFavorite(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavorite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFavorite indicates an expected call of RemoveFavorite
func (mr *MockDataStoreMockRecorder) RemoveFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavorite", reflect.TypeOf((*MockDataStore)(nil).RemoveFavorite), arg0, arg1)
}

// RemoveGIF mocks base method
func (m *MockDataStore) RemoveGIF(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGIF", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGIF indicates an expected call of RemoveGIF
func (mr *MockDataStoreMockRecorder) RemoveGIF(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGIF", reflect.TypeOf((*MockDataStore)(nil).RemoveGIF), arg0, arg1)
}

// Search mocks base method
func (m *MockDataStore) Search(arg0 string, arg1, arg2 int, arg3 string) ([]*shared.GIF, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*shared.GIF)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search
func (mr *MockDataStoreMockRecorder) Search(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataStore)(nil).Search), arg0, arg1, arg2, arg3)
}

// Trending mocks base method
func (m *MockDataStore) Trending(arg0, arg1 int, arg2 string) ([]*shared.GIF, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trending", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*shared.GIF)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Trending indicates an expected call of Trending
func (mr *MockDataStoreMockRecorder) Trending(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trending", reflect.TypeOf((*MockDataStore)(nil).Trending), arg0, arg1, arg2)
}

// UpdateCategories mocks base method
func (m *MockDataStore) UpdateCategories(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategories", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategories indicates an expected call of UpdateCategories
func (mr *MockDataStoreMockRecorder) UpdateCategories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategories", reflect.TypeOf((*MockDataStore)(nil).UpdateCategories), arg0, arg1, arg2)
}

// UserFrontpage mocks base method
func (m *MockDataStore) UserFrontpage(arg0 string) (*shared.FrontPageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFrontpage", arg0)
	ret0, _ := ret[0].(*shared.FrontPageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFrontpage indicates an expected call of UserFrontpage
func (mr *MockDataStoreMockRecorder) UserFrontpage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFrontpage", reflect.TypeOf((*MockDataStore)(nil).UserFrontpage), arg0)
}

// UserGIFInfo mocks base method
func (m *MockDataStore) UserGIFInfo(arg0, arg1 string) (*shared.UserGIFInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGIFInfo", arg0, arg1)
	ret0, _ := ret[0].(*shared.UserGIFInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGIFInfo indicates an expected call of UserGIFInfo
func (mr *MockDataStoreMockRecorder) UserGIFInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGIFInfo", reflect.TypeOf((*MockDataStore)(nil).UserGIFInfo), arg0, arg1)
}
