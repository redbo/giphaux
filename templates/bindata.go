// Code generated by go-bindata.
// sources:
// .gitattributes
// bindata.go
// error.tmpl
// favorites.tmpl
// footer.tmpl
// gif.tmpl
// header.tmpl
// index.tmpl
// pages.tmpl
// search.tmpl
// showgifs.tmpl
// templates.go
// user.tmpl
// usercategory.tmpl
// useruploads.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitattributes = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\x4b\x49\x2c\x49\xd4\x4b\xcf\x57\xd0\x4d\xc9\x4c\x4b\xe3\x02\x04\x00\x00\xff\xff\xe5\xa1\x25\x74\x11\x00\x00\x00")

func GitattributesBytes() ([]byte, error) {
	return bindataRead(
		_Gitattributes,
		".gitattributes",
	)
}

func Gitattributes() (*asset, error) {
	bytes, err := GitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitattributes", size: 17, mode: os.FileMode(438), modTime: time.Unix(1580254215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(1580830152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\x2b\xc9\x2d\xc8\x51\x52\xd0\xab\xad\xe5\xe2\xb2\x29\xb0\x0b\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\xcc\x53\x48\x2d\x2a\xca\x2f\x52\x28\x48\x4c\x4f\x55\xb4\xd1\x2f\xb0\x03\xc9\x56\x57\xeb\xb9\x24\x96\x24\xea\xf9\x16\xa7\xd7\xd6\x82\x05\xb9\x90\x4d\x4c\xcb\xcf\x2f\x41\x31\x11\x10\x00\x00\xff\xff\x68\x1e\x54\x0a\x6f\x00\x00\x00")

func errorTmplBytes() ([]byte, error) {
	return bindataRead(
		_errorTmpl,
		"error.tmpl",
	)
}

func errorTmpl() (*asset, error) {
	bytes, err := errorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.tmpl", size: 111, mode: os.FileMode(438), modTime: time.Unix(1580400913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _favoritesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\xc5\x30\x10\x45\xf7\xf9\x8a\x21\x7b\xf3\xe0\x2d\x6b\xcd\x4a\x74\xa7\xa0\xfe\xc0\x68\x27\x4d\x20\x25\x25\x33\x56\x25\xcc\xbf\x4b\x91\x96\xb8\x1c\x38\x73\xee\xbd\xad\x09\x2d\x6b\x46\x21\xb0\x91\x70\xa2\xea\x64\x59\xb3\x05\xa7\x6a\x0c\x00\xc0\x18\xaf\xfe\x01\xb7\x52\x93\x10\x0f\xd0\x9a\xbb\x47\x41\xf7\x2a\x58\x45\xf5\xe6\xb8\x9f\xe8\x5b\x9e\x43\x60\x12\x55\x28\xe1\xe4\xde\x8a\x60\x7e\x21\xfe\xcc\xc2\xaa\x30\xa7\xc0\xe3\x25\x5e\xfd\x9f\xbc\x8f\x5f\x71\x26\x3e\xd2\xf7\xdf\xa3\x41\x0f\x71\x2c\x5f\xbb\xa3\xe7\xdc\x63\x0a\x7c\xd6\x9d\xd2\x06\x2c\x3f\x99\xee\xec\x47\x26\xac\x03\xbc\x17\x89\xb7\xd6\x8f\x97\x29\x6d\xde\x98\x5e\x17\x4a\x91\x7f\x93\x7f\x03\x00\x00\xff\xff\xe9\xba\x7b\xbc\x10\x01\x00\x00")

func favoritesTmplBytes() ([]byte, error) {
	return bindataRead(
		_favoritesTmpl,
		"favorites.tmpl",
	)
}

func favoritesTmpl() (*asset, error) {
	bytes, err := favoritesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favorites.tmpl", size: 272, mode: os.FileMode(438), modTime: time.Unix(1580511346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x5c\x80\x00\x00\x00\xff\xff\x55\x33\xd2\x97\x17\x00\x00\x00")

func footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_footerTmpl,
		"footer.tmpl",
	)
}

func footerTmpl() (*asset, error) {
	bytes, err := footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl", size: 23, mode: os.FileMode(438), modTime: time.Unix(1579838624, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gifTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xd1\x6e\xab\x38\x10\x7d\xcf\x57\x8c\xbc\xd5\x6a\x57\xda\xc0\xaa\xda\x27\x02\xec\xc3\xad\x7a\xd5\xa7\x5e\xdd\xb6\x1f\x30\xe0\x01\xac\x82\xcd\x35\x43\xda\x08\xf1\xef\x57\x10\x20\xa4\x49\xd3\xaa\x91\xaa\x56\xaa\x48\x1c\xcf\xf1\x99\x33\x73\xc6\x34\x0d\x53\x51\xe6\xc8\x04\x22\x23\x94\x64\x1d\x2e\xca\x5c\x80\xd3\xb6\x8b\x85\x2f\xd5\x1a\x2a\xde\xe4\x14\x88\x02\x6d\xaa\xf4\x92\x4d\xe9\xc1\x7f\xff\x96\xcf\x2b\x11\x2e\x00\x00\xfc\xec\x72\xdc\x92\xe4\x06\xd9\x83\x9c\x12\x5e\xc1\x76\xbf\x07\xdb\xad\x4d\xe3\x5c\x21\xa3\x73\xaf\x38\xa7\xb6\xf5\xdd\xec\x72\x08\x9f\x1d\x31\xc4\x5b\x95\x66\x3c\xc2\x77\x7f\x4d\x63\x51\xa7\x04\x03\x04\xa6\x55\xdb\x4e\x3f\xf6\x20\x08\x71\x8e\x55\x15\x08\xc6\x54\x40\x66\x29\x09\x84\x5b\x11\xda\x38\xfb\xff\x57\xc0\x98\x7a\x4d\xe3\xb4\xad\x08\xff\xe8\x9f\xbe\x8b\x73\x74\xd2\x72\x00\xf4\x5d\xa9\xd6\xe1\x62\x7c\xcc\xb8\x31\x3d\xf3\x12\x73\x95\x6a\x0f\x62\xd2\x4c\x76\x15\xe7\x84\xd6\x83\xc8\x70\xd6\xb1\xf5\x55\x91\x42\x65\xe3\x40\xb8\xa9\x4a\xdc\x31\xe3\x9b\xab\xb6\x75\x52\x95\x88\x09\x76\xe1\x47\x36\xec\xfe\x17\x8b\xa6\x51\x09\x38\x0f\x15\xd9\x4e\xee\x2d\x9b\x6e\xa5\x8f\xec\x96\x6f\x74\x62\x9c\x6b\x5c\x1b\xab\x98\xe4\xb8\xa9\xa7\x5a\x86\xfb\x1a\x24\xc6\x16\xa3\x0c\x11\x56\x2a\xee\x16\x04\x60\xcc\xca\xe8\x40\xb8\x75\x45\xd6\xad\x4b\x89\x4c\x31\x32\xa5\xc6\x2a\xaa\x04\x14\xc4\x99\x91\x81\xf8\x71\x7b\x77\x2f\xf6\x21\x7b\x58\xa5\xcb\x9a\x81\x37\x25\x05\x22\x53\x52\x92\x16\xa0\xb1\xa0\x40\xa4\x2a\x51\x52\xc0\x1a\xf3\x9a\x02\x31\xcf\xf7\x08\xce\x58\xc3\x8b\x47\xda\xfc\x03\x17\x7d\x10\x78\xc1\xcb\x54\xbf\x4d\xcc\x5e\x94\x78\xe2\x93\x63\x44\xf9\xbc\xdc\x87\x67\xed\xce\x54\xc9\x70\xd4\x2b\x68\x47\xb3\x8c\x33\x8a\x1f\x23\xf3\x3c\xe6\x19\x23\x2f\x9b\xa6\x23\xde\xb6\x62\xdf\x0e\xdb\xf6\x86\x12\xa5\x54\x3a\x1d\xbe\x3d\x29\xc9\x99\x07\x58\xb3\x59\x4d\xf2\x18\x2d\xa0\x07\x26\x19\xc2\x88\x76\x82\x39\xe5\xd5\x97\x20\xfd\x3e\xb2\x93\x81\x0e\x38\xba\x7d\xbd\x8e\xf5\xc3\xf1\xa0\xde\x73\x43\x75\xad\x79\x12\xa1\x1f\xd5\xcc\x46\x0f\x69\x56\x75\x54\x28\x16\xe1\x43\xdf\xc7\xb0\x6b\x17\xf0\xd5\x18\x96\x20\x24\xb8\x24\xd9\xed\xf3\x5d\x15\xfa\xee\x16\x22\x1c\xfc\xb7\xcf\xaf\x73\xc9\x6e\xcd\x77\x67\xb6\xfa\xa0\xc5\x74\x32\xf8\xf5\xd3\xcc\xf5\x4e\xd1\x7e\x52\x61\xd6\x04\xd7\xd6\x14\x30\xce\x94\x43\xe1\x32\x42\xcb\x4b\xf3\x41\xed\x86\x21\x36\xb4\xef\x99\x52\x7e\xba\x90\x70\x7c\xc2\xfc\xd9\xbb\x6b\x05\x23\x9f\xea\xd5\xb6\x86\xf9\x75\xd5\x4d\xb5\xb7\x27\xda\x2b\x67\x9e\x6b\x7d\xe7\x7c\xdf\x3b\xa7\x18\x9f\x56\xe0\x2c\x73\xdf\xe1\x9a\xe0\xde\xbc\xd5\xa3\x67\x76\xa8\x96\xa7\xee\xdc\xdb\x27\xdd\x5f\xca\x53\xe8\x87\x1a\x58\x52\x4e\x5f\x6f\x0e\x5c\xf5\xac\xe0\xfb\xcd\x35\xfc\xb5\x31\x35\xa0\x25\xe0\x8c\xc0\x74\x39\xff\x7d\x20\x76\x84\xfa\x8c\x41\x3a\x29\x3d\xfb\xb0\x7b\xe7\x4c\x8c\xe1\xbd\x77\xce\xdf\x01\x00\x00\xff\xff\xae\xd4\x3a\x67\x91\x0a\x00\x00")

func gifTmplBytes() ([]byte, error) {
	return bindataRead(
		_gifTmpl,
		"gif.tmpl",
	)
}

func gifTmpl() (*asset, error) {
	bytes, err := gifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gif.tmpl", size: 2705, mode: os.FileMode(438), modTime: time.Unix(1580258612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\xe3\xb8\x11\xbe\xeb\x57\x20\x74\x25\xb6\xa7\x24\xd2\xf2\x58\xb3\x59\x8a\x52\xd5\xc6\xd9\xcc\x4c\x55\x0e\x9b\x9d\xdd\xaa\x54\xa5\xf6\xd0\x02\x9a\x24\xc6\x20\xc0\x00\xa0\x1e\x71\xf9\xbf\xa7\x40\x52\x14\x9f\x9e\x9d\x39\xe4\x14\x1d\x6c\x11\x8f\xee\x0f\xfd\x7d\xdd\x0d\x2a\x4a\x6d\x26\xb6\xb3\x28\x45\x60\xdb\x59\x64\xb9\x15\xb8\x7d\xcf\xf3\x14\xa1\x38\x46\x41\xf5\x3c\x8b\x04\x97\x4f\x44\xa3\xd8\x78\xc6\x9e\x04\x9a\x14\xd1\x7a\x24\xd5\x18\x6f\xbc\xd4\xda\xdc\x84\x41\x40\x99\xfc\x6c\x7c\x2a\x54\xc1\x62\x01\x1a\x7d\xaa\xb2\x00\x3e\xc3\x31\x10\x7c\x67\x82\x58\x49\xbb\x80\x03\x1a\x95\x61\xf0\xe0\x7f\xe7\xdf\x05\xd4\x74\x87\xfd\x8c\x4b\x9f\x1a\xe3\x6d\x67\x51\xe9\x67\x3b\x23\x84\x90\x9d\x62\x27\xf2\x5c\x7e\x75\x9f\x0c\x74\xc2\x65\x48\xee\xd6\xcd\x50\x69\x24\x86\x8c\x8b\x53\x48\x7e\xd0\x1c\xc4\x9c\x7c\x40\xb1\x47\xcb\x29\xcc\x89\x01\x69\x16\x06\x35\x8f\x2f\x5b\x76\x40\x9f\x12\xad\x0a\xc9\x16\x54\x09\xa5\x43\xb2\x13\x40\x9f\x2e\x0b\xea\xd1\x43\xca\x2d\x5e\x46\x2d\x1e\xed\x02\x04\x4f\x64\x48\x28\x4a\x8b\xba\x9a\x7b\x29\xff\x42\x0b\x66\xbd\x5f\xf0\x24\xb5\x3b\x51\x60\x7b\xdd\x15\x55\xd2\xa2\xb4\xa6\xb5\x9e\x71\x93\x0b\x38\x85\x84\x4b\xc1\x25\x2e\x76\x42\xb5\xe1\x1c\x38\xb3\x69\x48\x96\x77\xf7\x0f\xf9\x71\x1c\x8f\xc0\xd8\x5e\x66\x72\x65\xb8\xe5\x4a\x86\x8e\x37\xb0\x7c\xdf\x45\x60\x55\x2e\x61\xdf\xf2\x9f\x03\x63\x5c\x26\xce\xc5\xd9\x41\x77\x69\xfb\x70\xa5\x5b\x86\x54\x69\xa8\x7c\x48\x25\xf1\xb5\xd8\xf5\x4c\xf9\xb1\xd2\x59\x29\xaa\x3e\xaf\x0b\xab\xf2\x36\x86\xd6\x8c\x3b\x5f\x48\x3a\xc7\x8f\x85\x02\x1b\x12\xed\x82\xbc\x1e\x1e\xe5\x5d\x7b\xed\x38\xcd\x43\x1d\x30\xd0\x4f\x89\x86\xd3\x18\xf0\x74\xd9\x02\x5c\xaa\xce\xf0\xff\x60\x48\x1e\x56\x6d\x4f\x3d\x2a\x3b\x86\x84\x4a\xd4\xef\xb1\x71\xc1\x15\x92\xc5\x01\x77\x4f\xdc\x2e\x9c\x31\xd0\x8b\x44\x03\xe3\x28\xed\xcd\xc3\x8a\x61\x32\x27\xf4\x04\x72\x4e\x12\x8d\x28\xe7\xe4\x84\x42\xa8\xc3\x9c\x64\x90\xa0\xb4\x70\x7b\xb1\x78\xb6\xd2\x3e\xb1\xe0\x79\x58\x92\x39\x5c\x56\x52\x1c\x73\x21\xce\x71\xb1\x1a\xa4\xc9\x41\xa3\xb4\x9d\x13\x19\x04\x4d\x53\xa7\x68\xe0\x12\xf5\x14\xa3\xab\x9e\xaa\xfa\xdb\xb8\xcc\x0b\xdb\xda\x5c\x0b\xfe\xfb\x55\x47\x0a\x29\x3a\xaa\x43\xf2\xd0\x19\x6d\x08\xbf\xef\x0c\xef\x94\x66\xa8\xfb\xe2\x6c\x85\x7c\xf9\xdd\x17\x40\xed\x0a\x6b\x95\x1c\xa2\xfa\x3d\xa0\xda\x0c\x5e\x31\xc6\x46\x11\xdc\xdf\x7f\x19\x30\x2d\xb4\x71\x04\xe4\x8a\xf7\x0b\xce\x04\xe0\x30\x55\xfb\x0e\x13\x1d\x2c\x94\xd2\xb6\x0d\xbf\x2e\x46\x8b\xca\x7b\xb3\xab\xa5\x13\xee\xd4\xe4\x6a\xd9\x2b\xfa\xcb\x0b\x9d\x0b\x9c\x93\x3d\x57\x02\x6d\xa3\xbb\x73\x6c\xfa\x55\xc5\xdf\x81\xe1\xd4\x95\x01\xf2\xdc\xe4\x4b\x55\xf3\x46\x72\xf2\x6a\xb5\x5a\xad\x5b\x25\xca\x89\xe9\xd2\x08\xf2\xe3\x7a\x60\x34\xbd\x1f\x69\x19\x25\x88\xc9\x1a\xde\x97\xec\x34\x62\x5f\xab\x03\xf1\x63\x8e\x82\x4d\x78\x71\x9b\xc9\x2a\x3f\x92\xfb\x49\x23\xa5\xe0\xe7\xed\x91\x81\xda\x9a\x03\xaf\x86\xe5\xb0\x85\x8f\xb4\xfb\xc3\xdd\x1f\xfb\x7a\x5a\x38\xbe\x0a\xd3\x2b\x9d\x67\xad\x75\xac\x2c\xf3\x23\x31\x4a\x70\x46\xae\x96\xcb\xe5\x6b\xc0\xff\x65\x4f\x39\x6e\x4c\xb1\xcb\xb8\xfd\x6d\x3e\x31\x5d\x1d\xe8\xb7\xd7\x0f\x39\xc6\xf6\xee\xdd\xba\xdb\x44\xaa\x9c\x39\xd4\x62\xda\x29\xc1\xd6\x9d\x44\xf6\x97\x98\xad\x07\x99\xd2\xa1\xf3\x6d\x2f\xd7\x85\x4a\xb8\x74\x90\xe6\xe4\x4a\x63\xc2\x8d\x45\x5d\xe9\x71\x58\xc8\x7b\x15\x64\xb4\xeb\x9c\x03\x7a\x89\x61\xef\xee\x70\xe9\xc8\xb0\x33\x4a\x14\x9d\x7b\xc5\xb0\xeb\xd5\x8c\xbe\xbb\xeb\x8c\xea\x2a\x02\x7d\x6d\x5a\x48\x5e\x0f\xe9\xdb\x3f\x3f\x8e\xd4\xcb\xd5\x50\x11\x8d\x5a\x46\x35\xf7\x76\x70\xf9\xf8\x9a\x5b\xc0\x78\x98\xae\x00\xa0\x5f\x1c\xdd\xed\x2f\x24\xdc\x82\xe0\x74\xb2\xb1\x0e\xee\x48\xce\xd3\xc2\xe4\x40\xd1\x61\x39\x68\xc8\x07\x41\x9a\x62\x78\xdc\xe2\x20\xd5\xfa\x96\x26\x53\x76\xfa\x02\xb3\x9c\xe8\x12\x93\x7d\x96\x4c\x65\xeb\xf8\x15\x93\xbc\xde\x32\xfa\xd8\x87\xbd\xe2\x15\x57\x3d\x2e\x27\xdc\x44\x41\x7d\x7b\x9f\x45\x86\x6a\x9e\xdb\xea\x1e\x1f\x17\x92\x3a\x9d\x10\xaa\xf2\xd3\x2f\x78\xb4\x37\x9c\xdd\xb6\x1c\x07\x6f\xc8\x7b\xb4\xc4\xa6\x58\x2a\x8b\x54\xf5\xf5\x4d\xd0\x2c\xd8\x83\x6e\xf6\x92\x0d\x61\x8a\x16\x19\x4a\xeb\x27\x68\x7f\x14\xe8\xbe\xfe\xe5\xf4\x91\x39\xab\xeb\xd9\xac\xb1\xf9\x09\x05\xd2\x69\xb3\x67\x83\xbe\x29\xd7\xdd\x34\x9d\xab\x35\x61\x2b\x1b\x5c\xc9\x9f\x41\x26\x78\x73\x37\x27\xdf\xbb\xcf\xed\x9a\x04\x6f\xfe\xa6\x34\xc9\xd4\x8e\x0b\x24\x0c\xf7\x9c\xa2\x79\x13\xb4\xdc\x3f\xaa\xfc\x74\x71\xce\xa5\xe1\x0c\x27\xc1\x34\x47\xc2\x23\xd2\x47\x95\x65\x20\xd9\x8d\xe7\x90\x78\x0d\x2e\x8d\xb6\xd0\x92\xc4\x20\x0c\xb6\x22\x5e\x07\x7a\x16\x05\xf5\xbb\x9c\x7b\x6d\xda\xce\x22\xc6\xf7\x84\xb3\x8d\x77\x7e\xe5\xf0\x2a\x32\x9a\xf1\xa6\x0c\xd6\x13\xe5\x64\xa9\x0f\x2a\xc0\x98\x8d\xd7\x94\x6e\x8f\x40\x19\x83\x8d\x17\x94\x9b\x3c\x92\xa1\x4d\x15\xdb\x78\xb9\x32\xb6\xb5\xbd\x34\x91\xde\x6f\xff\xae\x12\xf2\x51\x46\x41\x7a\xdf\x9b\x73\xbe\x6b\xeb\x5a\x1d\xbc\x6d\x7b\xa0\x8c\x88\xb7\xfd\xd5\xa0\x96\x90\x61\x14\x30\xbe\xdf\x46\xd5\xed\xb0\x6c\x2a\x9e\x0b\x9c\x47\xdc\xe4\xc6\x2b\xea\x65\xde\xe5\x2c\xcd\xd0\xb6\xda\xfb\xd5\xae\x7f\x02\x63\x0e\x4a\xb3\x11\xd7\x79\x3d\x75\x76\xdf\x3c\x7f\xab\xaf\x4f\x65\x03\x1d\xf1\x54\x75\x56\x8f\xec\x41\x14\xb8\xf1\xaa\x50\x92\x3f\x69\xd0\x7a\x7d\xf6\x5e\xaf\xe9\xfb\x8e\x02\xc7\x56\x4d\xf3\x65\xaa\x61\xbc\xdd\xec\xbe\x86\xf4\xf3\xbe\x2f\xf2\xfe\xa8\x11\x2c\x12\x47\xe1\xff\x90\xfc\x33\xbc\xff\xf3\xff\x05\xfe\xab\x77\xd9\x36\xf3\xe9\x72\x1b\x41\xfd\x73\x4e\xe0\x6d\x23\x7e\xce\x26\xe5\x35\x78\x81\xc4\xb0\xa0\x90\xa1\x86\x85\x46\xab\x95\xf3\xcb\xb7\xe4\xfd\xc7\x9f\x3e\xfc\xf0\xeb\x3f\xa3\x00\xb6\x51\x90\x2e\x2f\x56\x9f\x9f\x79\x4c\x7c\x47\xe5\xcb\x4b\x37\x2e\x8d\xab\xdd\x09\x2f\x0e\xea\x5f\x04\x3c\x57\x36\x54\x61\x9d\xc1\x89\x6d\x8e\xe1\x60\x64\xe3\x07\x95\x61\x48\x9e\x9f\x4b\xa7\xfe\x59\x44\x2f\x2f\x1d\x53\xcf\xcf\x28\x0c\x0e\x21\xf5\xad\x11\x25\x1f\x05\xa7\x4f\x1b\xef\x33\xec\xa1\x2a\xaf\x61\xaf\xd3\x5c\x37\xc5\xf3\xfa\xd6\x2f\x7b\x9e\x5f\x5f\x28\x36\xd7\xe5\x4d\xe2\x7a\x3d\xba\xe3\x2c\xd1\xeb\x5b\x3f\x56\xb4\x30\x37\xb7\x6b\xaf\xa9\x96\xc3\x63\x7f\x13\xb4\x76\x96\x4f\xa2\x1b\xc0\xeb\x27\x51\x07\xe1\xcf\xf5\x64\x3f\x9e\x92\xd5\xe1\xec\xab\xad\x06\xde\x7d\xc1\xec\xe8\xb5\x11\x65\xef\x45\x76\x50\x97\x9a\x2a\x54\x2d\xbc\xd4\xa0\xf7\x3f\xfe\xd2\x2f\x41\x55\x1e\x55\x39\xf2\x6f\xaf\x53\x38\x72\x01\x14\x53\x25\x18\xea\x8d\xf7\xa9\x34\xe5\x2e\x43\x24\xe1\xb1\x21\x20\x19\x31\xb6\x88\xe3\x3f\x34\x79\x57\x89\xf8\xaf\x60\xe1\xe5\xa5\xfa\xfe\x8f\x02\xf5\xc9\x3d\x94\xa3\x97\xc7\x32\x0a\xf5\xbf\x3e\xa0\xfa\x96\xd8\xc9\x6c\x97\x65\x9d\xdc\xaa\x0f\x56\x66\x55\x14\x54\x5b\x5e\x4d\xea\xff\x06\x00\x00\xff\xff\xd2\x68\x3d\x11\xbc\x15\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 5564, mode: os.FileMode(438), modTime: time.Unix(1580829931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\x2b\xc9\x2d\xc8\x51\x52\xd0\xab\xad\xe5\xe2\xb2\xc9\x30\xb6\x0b\x29\x4a\xcd\x4b\xc9\xcc\x4b\xb7\xd1\xcf\x30\xb6\xe3\xe2\x42\xd6\x50\x9c\x91\x5f\x9e\x9e\x99\x56\x0c\xd3\xe2\x92\x58\x92\xa8\xe7\x9c\x58\x92\x9a\x9e\x5f\x94\x99\x5a\xac\x07\xd3\x0a\x33\x2a\x28\x35\x39\x35\xaf\x44\x21\xb4\x20\x27\x3f\x31\xa5\x98\x0c\x03\xa1\x3a\x41\xe6\x21\x6b\x4b\xcb\xcf\x2f\x41\x71\x38\x20\x00\x00\xff\xff\xcf\xe5\x6d\xa6\xd6\x00\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 214, mode: os.FileMode(438), modTime: time.Unix(1580510943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x4b\x8e\x83\x30\x0c\x40\xf7\x9c\xc2\xca\x62\x76\x13\x66\x3d\x0d\xf4\x06\xfd\xa9\x17\x88\x8a\x43\x23\x45\xa0\x26\x06\x81\x52\xdf\xbd\x0a\x05\xd1\x45\x55\x75\x19\xbf\xe7\xf8\xa9\xca\xf6\x10\x68\x74\x58\x08\xc2\x81\x7e\xb5\xb3\x75\xf3\x0f\x17\x6c\x08\xfd\x46\x94\x19\x00\x40\x8c\xd6\x40\x4d\x20\xf7\xc6\x04\x24\xf8\x63\x9e\xe6\x4a\xc3\xd5\xa3\x29\xc4\xb6\x9d\x40\x11\xa3\x3c\x78\xec\x9f\x1a\xf3\xb4\x27\x8f\x1d\xfa\x91\xf9\xe7\x96\xf0\xfc\x88\x11\x9b\x8a\x59\x94\x49\x57\xb9\x5e\xee\xa0\x0b\x38\x7f\x9e\x08\x2c\xe3\x24\xc3\x7d\x8d\x71\x04\x72\x87\x03\xcd\x41\xf2\xdc\x92\x76\x27\x0c\x9d\xa3\xf0\x21\x6e\x5d\xf9\x2a\x2e\xe9\xef\xe3\x12\x79\x6d\xcb\x54\x5e\xd9\xbe\x7c\x04\x00\x00\xff\xff\xa0\x90\x6c\x72\x4f\x01\x00\x00")

func pagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_pagesTmpl,
		"pages.tmpl",
	)
}

func pagesTmpl() (*asset, error) {
	bytes, err := pagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages.tmpl", size: 335, mode: os.FileMode(438), modTime: time.Unix(1580830008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x21\x77\xb3\xb0\xc7\xb5\xe6\x24\x78\x53\x70\x7d\x81\x71\x3b\x69\x02\x29\x29\x99\xb1\x2a\x61\xde\x5d\x8a\xb6\xc4\xe3\xc0\xf7\xff\xf3\xfd\xad\x09\xcd\x4b\x46\x21\xb0\x91\x70\xa4\xea\x64\x5e\xb2\x05\xa7\x6a\x0c\x00\xc0\x10\xcf\xfe\x4a\x58\x6f\x11\x5e\x89\x3f\xb2\xf0\x05\x5a\x73\x8f\x28\xe8\xae\x82\x55\x54\xef\xf6\xfb\x99\xbe\xe4\x25\x04\x26\x51\x85\x12\x0e\xee\xad\x08\xe6\xbf\xb4\x2a\x4c\x29\xf0\x70\x8a\x67\xff\xfb\xa1\x77\x58\x70\x22\xde\x15\xb6\xec\xae\xd1\x43\x1c\xcb\xe7\xd6\xd1\x73\xee\x29\x05\x3e\x9c\xc7\xb4\x02\xcb\x77\xa6\x07\x7b\xcb\x84\xf5\x02\xef\x45\xe2\xbd\xf5\xc3\x69\x4c\xab\x37\xa6\xaf\x0b\xa5\xc8\xbf\xdd\x3f\x01\x00\x00\xff\xff\xf6\xaf\xbc\xa7\x15\x01\x00\x00")

func searchTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchTmpl,
		"search.tmpl",
	)
}

func searchTmpl() (*asset, error) {
	bytes, err := searchTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search.tmpl", size: 277, mode: os.FileMode(438), modTime: time.Unix(1580829759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _showgifsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\xc1\x6e\xc3\x20\x14\xbb\xef\x2b\x2c\x7a\x4e\xd2\x66\xca\x85\xa4\xb9\x6c\x97\x7d\x06\x0d\x84\x3c\x8d\x02\x22\xac\xcb\x84\xf8\xf7\x49\xb4\xd9\xa6\x71\x7b\xb6\x6c\x6c\x03\x40\x4a\x41\x58\xad\x50\x23\xe7\x27\x3c\xde\x20\xe9\x86\x35\x7e\x19\x75\x66\x8b\x22\xbd\x44\x8e\xe7\xe3\xd1\x6f\x3d\x3e\x49\xc6\x85\xa3\xed\xca\x75\x11\xd3\xbb\x0e\xee\xc3\xca\x6a\x72\xc6\x05\x8e\x43\xdb\xb6\x3d\xa2\xda\x62\x25\x0c\x69\xcb\x31\x29\x1b\x55\xe8\xe1\x85\x94\x64\x35\xc7\xa9\x48\xaf\x22\x68\xb2\x1c\x5d\xf1\x71\x41\xaa\xc0\x71\xf2\x1b\x56\x67\x48\xe2\xd0\x75\x5d\x8f\xd9\x38\x11\x39\x8c\x9a\x63\xcf\xc6\x9f\x7c\x25\xa3\xc0\x12\xd4\x7c\x66\x8d\xa6\x79\x6d\x52\xaa\xdf\x5e\x73\x66\xe3\x40\x57\x8d\x35\x4c\x77\x62\xc7\x6b\x4d\x33\xdb\x2b\x5d\xc5\x56\xed\x3d\x8e\x8f\x30\x5b\xb5\x17\xbd\x43\x6c\x1c\x1a\xf1\xef\x47\x3f\xa6\x54\xbf\x08\x1f\xc9\xd9\x9c\x87\xc6\xff\xf2\x43\x23\xe9\x76\x3f\x53\x52\x56\x3e\xc6\xfc\x3b\xe4\x64\x94\x08\x1c\x17\x17\x97\xe2\x5e\x04\xdf\x01\x00\x00\xff\xff\xbc\xa2\x78\x8d\x83\x01\x00\x00")

func showgifsTmplBytes() ([]byte, error) {
	return bindataRead(
		_showgifsTmpl,
		"showgifs.tmpl",
	)
}

func showgifsTmpl() (*asset, error) {
	bytes, err := showgifsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "showgifs.tmpl", size: 387, mode: os.FileMode(438), modTime: time.Unix(1580830147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\x9b\x40\x10\x85\x6b\xf6\x57\x4c\xa8\x96\x88\xc3\xbd\x23\x17\x69\x52\x25\xa7\x14\xe9\x4e\xa7\x68\x0c\x03\x5e\x79\xd9\x45\x33\x8b\x22\xcb\xe2\xbf\x47\xb3\x80\x9d\x74\xd7\x50\xbc\x79\xfb\xcd\x7b\xc3\x84\xed\x15\x07\x82\x44\xe3\xe4\x31\x91\x18\xe3\xc6\x29\x72\x02\x6b\x8a\xf2\x92\x46\x7f\xd8\x47\xa5\xa9\x8c\x39\x1c\x86\x78\x1c\x28\x10\x63\x22\x18\xe2\xcb\xd9\x85\x0e\x13\xc2\xcb\x74\x1d\x9e\x14\x68\xd4\x0a\xdf\x23\x76\xbf\x1e\xda\x84\x2c\x24\x80\xde\xff\x63\xec\x39\x8e\xb0\x03\x3b\xd8\x71\x18\x3a\x60\x4a\x33\x07\x81\x74\xa1\x11\x50\x00\x41\x66\x97\xa8\x31\xfd\x1c\xda\xff\xd9\xb6\x02\xfb\x79\x87\x36\xbb\x5c\x03\x31\x47\xae\xe0\x6e\x0a\x7d\xf3\x03\x27\x38\x9e\x60\xc4\xe9\x4d\x12\xbb\x30\xbc\xbb\x90\x88\x7b\x6c\xe9\xbe\xdc\x4d\x51\x94\x6d\x0c\x09\x5d\x90\xf2\x08\xfa\xc0\x06\xa2\xce\x13\xac\xee\x1a\x2e\x78\x93\x84\xed\x15\xde\xde\x57\xa9\x82\x73\x8c\x5e\xf9\x45\xd1\x47\x86\xdf\x35\x88\xae\x60\x0c\x03\x3d\xed\x79\x5e\xb8\x1e\x36\xde\xe9\x04\xb2\x89\xc5\xda\x12\x12\xcf\x94\x85\xc5\xec\x9f\x6d\xd2\xa3\x17\x1d\x2d\xb5\x51\x9d\x63\x4c\xba\xe2\xd1\xf6\x95\xfe\xd8\xf2\x50\x56\xcd\xb7\x39\xb4\x62\xb7\xa2\x95\x79\x04\xe2\xf6\x19\xe9\xab\x08\xa5\x57\x1c\xf3\xc9\x34\x81\xeb\xe1\x1c\xbb\x5b\x3e\x95\xda\xb2\xc1\x0a\xb7\xd5\x97\x2c\x7d\x3a\x41\x70\x5b\xc3\x2d\x50\x70\x3e\xdb\x35\x13\x90\x17\x02\xd7\xeb\xa2\x8d\xa0\x01\x73\x28\x85\x34\x3f\xf5\xa7\xdb\xf5\x5a\x56\x37\x55\x1f\x03\xaf\x5d\x57\x5d\x89\xb5\x4e\xcd\x62\xfe\x06\x00\x00\xff\xff\x38\x6a\x1f\xdb\xb1\x02\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 689, mode: os.FileMode(438), modTime: time.Unix(1580235937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xed\x6f\xdb\xbc\x11\xff\x9e\xbf\xe2\xc6\x76\x73\x82\x26\x72\x92\x22\x4b\x61\x5b\x1e\xda\x6c\xdd\x82\x02\x6d\x80\xa6\xc0\x86\x61\x1f\x28\xe9\x24\x11\xa1\x49\x95\xa4\xe2\x68\x86\xff\xf7\x07\xa4\xde\x28\xbf\xc5\xe8\x83\x27\x5f\x2c\x1e\x8f\xf7\xbb\x77\xf2\xb2\x5a\x19\x5c\x14\x9c\x1a\x04\x92\x23\x4d\x50\x05\x66\x51\x70\x02\xc1\x7a\x7d\x72\x32\xd3\xa6\xe2\x38\x3f\x01\x00\x08\x0c\x8d\x38\x13\x4f\xb0\x72\x4b\xfb\x17\xd1\xf8\x29\x53\xb2\x14\xc9\x45\x2c\xb9\x54\x13\x78\x73\x73\x73\x33\xed\xf6\x1b\xe2\x32\x67\x06\x7b\x6a\xca\x25\x35\x13\xe0\x98\x9a\x9e\x18\x49\x95\xa0\x9a\x80\x90\xc2\x63\x95\xa5\xe1\x4c\xe0\x26\x39\x2e\x95\xb6\x82\x0b\xc9\x84\x41\xd5\x6f\x14\x34\x49\x98\xc8\x26\x70\x75\x59\xbc\xf4\xe4\x05\x55\x19\x13\x13\xb8\x2c\x5e\xe0\xa6\x78\x71\xbf\x03\x86\x54\x0a\x73\xa1\xd9\xff\x71\x02\x57\xb7\xfe\xc6\x92\x25\x26\x9f\xc0\xd5\x87\x3f\xd7\xb4\xf5\xc0\x15\x93\x5c\x3e\xa3\x3a\xec\x90\xdb\xdb\xdb\xcd\xa3\xb1\x14\x06\x85\xf1\xce\xed\x76\x54\xc2\x74\xc1\x69\xb5\x69\x7d\x67\xe4\xf5\xc0\x86\xd6\x83\xef\x8b\x17\xd0\x92\xb3\x64\x23\x18\x0b\x26\x2e\x72\x64\x59\x6e\x26\x70\x73\x39\x38\x1a\x73\xa4\x6a\x02\x91\x34\x79\xab\xeb\x6c\xdc\x84\xfe\x64\x96\xb0\xe7\x3a\x03\x66\x51\x69\x8c\x14\xc0\x92\x90\x18\x1a\xfd\x4b\x2e\x90\x40\xcc\xa9\xd6\x6e\x6d\x3d\x42\x40\x8a\x98\xb3\xf8\x29\x24\xb2\x40\xf1\x40\x33\x3c\x1d\x59\xc6\x47\x1a\x8d\xce\xc1\xe4\x4c\x9f\x4d\xb9\x8c\xa9\x61\x52\x04\xb9\xc2\x34\x1c\xbd\xb1\xfb\xa3\x29\x99\xdb\xdf\xd9\xb8\x06\xd9\x89\x78\x47\x0d\x66\x52\x31\xd4\x47\xe1\xf6\xec\x87\xd0\x7b\x2e\xab\x43\xbf\x3a\xa8\xc9\x8f\x82\x4b\x9a\x1c\xa5\x45\xcd\x7a\x48\x83\x9a\xc3\xa2\xd7\x5f\xf0\x15\x97\x07\xd1\x3f\x3e\xdc\x7f\xc1\xea\x28\xf4\x9a\xf5\x10\x7a\xcd\x61\xd1\x3f\x3e\xdc\xc3\x17\xac\x7a\xe8\xd9\xd8\xc5\xde\xa5\x80\xc3\x6e\x22\xe9\x23\x37\xc9\x4c\x1a\x45\xf3\xf7\xf3\x19\x05\x27\x9a\x8c\x4b\x8d\x6a\x5c\x3a\x9b\x74\x6b\x9c\x9e\x8d\xe9\x7c\x36\xce\xdf\xd7\x07\xfc\xfe\xa3\x73\xb9\xcc\x58\xaa\xdb\x0e\xf4\x77\x6a\x68\xd0\x07\x24\x68\x04\xd8\xc6\xb4\x07\x2b\xa5\xcf\x52\x31\x83\x9a\xcc\x3f\xb7\x9f\xbf\x8e\xd7\x89\x68\x11\x57\x2b\x45\x45\x86\xf0\xf6\x09\xab\x73\x78\xfb\x4c\x79\x89\x30\x09\xb7\x4e\xae\xd7\x5d\x69\xad\x56\x4b\x66\x72\x77\xc2\xa3\xd6\x3b\x2c\x05\xfc\x09\x01\x90\xc6\x30\x02\x5b\x2c\xc8\x35\x6e\x10\x37\xce\x76\x4a\x92\x9d\x7c\x7b\x04\xec\xf1\x5f\x5c\x9b\x50\x8d\x57\xab\x60\xbd\x26\x73\xf7\x33\x74\xe0\x36\xc4\x5e\x87\xd6\x0e\xda\xad\x96\x48\xb6\x6d\x1d\xd0\xfc\x75\xfb\xbd\x95\x8f\x83\x0a\x3f\x90\x95\xa9\x54\x8b\x76\x37\xa2\x9a\xc5\x96\x40\x80\xc6\xb6\x10\x5a\xe3\x69\x92\xb4\xf6\x13\x58\xa0\xc9\x65\x12\x92\x42\xea\x56\x4a\xed\xb3\xeb\xf9\xc7\x24\x01\x0a\x02\x97\xd0\xb2\xff\x69\x36\xce\xaf\x3d\x26\xab\x5e\x83\xa6\xe4\x92\xcc\x7d\x42\xca\x90\x27\x5d\x9f\xa9\x6a\x93\x66\x4c\x14\xa5\x01\x53\x15\x18\x12\x83\x2f\x86\x80\xa0\x0b\x0c\x49\xa7\xd0\xbc\xb1\x7d\x3f\x86\x2f\x42\x97\xd1\x82\x19\x02\x2e\x00\x21\xf9\xee\x96\xf0\x97\x37\x1f\xfe\xfa\xe1\x7a\x3a\x90\x35\x1b\x5b\x57\xf4\xc5\xfb\x1f\x59\x2a\xe8\xdd\x3a\xf1\x2b\xa7\x4e\xfe\xe0\x87\x46\xb5\x3b\xd9\x67\xac\x0f\x41\x46\xda\xcc\xd2\x48\x55\x9c\xff\xed\x67\x68\x68\x36\xf1\x13\x6b\x10\xff\x3a\x46\xc3\x88\x28\x5c\xc8\x67\xdc\x0e\xca\xc3\xb7\xef\x8f\x04\xdc\x05\x15\x12\xef\x72\x9f\x92\xed\x1c\x1d\xf8\x25\x67\x49\x82\x62\xcb\xb9\xad\x9f\x1a\xe5\xb6\x65\x34\xed\x77\xe0\xdc\xf9\xbf\x87\x3d\xba\x63\xf6\x3c\x5a\xaf\xd9\xfc\x70\x16\x77\x37\xc4\xef\xcd\xe0\xb2\xb9\x95\x06\xc9\x0b\x28\xe2\x5a\xf1\x45\xc9\x0d\x2b\xa8\x32\x4e\xc3\x8b\x84\x1a\xea\xa7\xf6\x7e\x47\x29\x6a\x98\xc8\x3a\x37\x65\x1b\x05\xd1\xdc\x5a\x75\x4d\x64\x2c\xfd\xa5\x72\x28\xac\x21\xaf\x56\x83\xe3\x3a\xa2\x18\xb6\x11\x1e\x69\xa6\x5f\x11\x6f\x68\xa6\x5f\x97\x3d\x0c\xf6\x36\x90\x6d\x0f\x46\x82\xff\x90\x18\x08\x3c\xb2\x96\x3a\x04\x4e\x23\xe4\x7e\x5d\xed\xee\xc3\x03\xab\xe2\x1c\xe3\xa7\x48\xbe\x78\x99\x7e\x51\x27\xf7\xae\xaa\xe9\x5f\x94\x6e\xd5\xbc\x79\x69\x69\xe4\x94\xcc\x61\xbb\x54\xeb\xac\x76\x7a\x6d\x9a\x35\xec\xe1\xbf\x10\xa6\xcf\x8c\xe3\x8e\x30\xa5\x8c\x63\x6b\x4c\x9d\xe5\x9f\x1d\xc5\x96\x8f\xb7\xfe\xa3\xbb\xe4\x56\xe9\x76\xcf\xab\x03\xa5\x5b\xcc\x1f\x73\xa6\x81\x69\xa8\x6c\x73\x6d\x5e\x59\x01\xc0\xbd\x81\x98\x0a\x88\x10\x4a\x8d\x2e\x69\x68\x1c\xa3\xd6\x60\x72\xb4\x6c\xc1\x6c\x5c\x74\x32\xbe\x20\x16\xc0\x0c\x68\x8c\x15\x9a\x00\xa0\x23\xd0\x14\x3d\xce\xdd\x8d\xe2\x58\x97\x0c\xca\x81\x19\xeb\xe2\xbe\x37\xba\x64\xad\x2d\xb6\x99\x64\xed\xa7\x05\x7b\xc2\xca\xb1\x10\x50\x48\x13\x29\x78\x15\x92\xf6\xeb\x88\x80\x34\xad\x55\x8a\xbb\xfa\xe9\x1a\xcb\xa2\x7a\xc4\x17\x73\x3a\xf2\x64\x8f\xce\xa6\x0a\x4d\xa9\x04\xa4\x94\x6b\xb4\xef\x74\x59\x54\xad\x2b\xbd\x7b\x27\xa5\x90\xd2\x0b\x2b\xc3\x42\xb3\x79\xd7\xa2\x0f\x05\x53\xc7\x8a\x15\xa6\xde\x4c\x4b\xe1\x5a\x2a\x74\x4f\xe8\x82\x66\xf8\x95\x2e\xf0\x1c\x90\x2f\x84\x39\xf3\xc6\xb6\x67\xaa\x80\x9d\x43\x1f\x72\xf7\x6d\xdf\xe2\xba\x1f\xae\xbc\x81\x2f\x84\x44\xc6\xe5\x02\x85\x09\x32\x34\xff\xe0\x68\x3f\xf5\xa7\xea\xce\x2a\x6f\x31\x4e\xfd\xf4\x39\xf3\xe7\x53\x05\xa7\x0c\x42\xb8\x9c\x02\x83\x99\x27\x33\xe0\x28\x32\x93\x4f\x81\xbd\x7b\xe7\xab\x36\x44\xfe\x2f\xfb\x5f\xe0\x0a\x3f\x68\x66\x4a\x08\x81\xd8\xa9\x92\xf4\x18\x6b\x5f\x63\x67\xc3\x91\xfa\xba\xd9\xe3\xb0\xb2\x4e\xdc\x2b\xaa\x3a\x9e\x5e\xd1\x7e\x94\xbe\xb3\xc3\xb1\x55\x78\xa7\xb2\x3b\x34\xfc\x54\xdd\x27\x5d\xd8\xce\xb6\x0d\x8f\xb8\x8c\x9f\x3c\x61\x2e\xae\x7b\x61\x47\xd2\xf5\xea\x91\x3f\xc5\x8f\xc7\xf0\x4f\x34\xae\x4e\xb1\xc6\x04\xf7\xcc\xb7\x25\x91\x60\x4a\x4b\x6e\xbe\x15\xf6\xfe\xa4\x22\x01\x37\x93\x81\x9d\xde\xcc\x49\x9b\x35\x86\x46\x10\xc2\x92\x89\x44\x2e\x83\x7e\x22\xa3\x3a\x0f\x74\x19\x69\xa3\x4e\xaf\xce\x1c\x33\x4b\xe1\xd4\xd0\xc8\xf7\xd7\x3e\x8b\x6d\x2c\xc8\x3b\xcb\x1c\x38\xc8\xd3\x5a\xc2\x1a\xec\x0c\x70\xe4\x79\x37\xd3\x77\xe7\xa7\xd0\xff\x37\xa0\xa9\x91\x13\xff\xbd\x9f\x4a\x69\x06\xff\x30\xfa\x2d\x00\x00\xff\xff\xc9\x98\xa8\x4a\x4e\x12\x00\x00")

func userTmplBytes() ([]byte, error) {
	return bindataRead(
		_userTmpl,
		"user.tmpl",
	)
}

func userTmpl() (*asset, error) {
	bytes, err := userTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user.tmpl", size: 4686, mode: os.FileMode(438), modTime: time.Unix(1580762200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _usercategoryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\x04\x31\x0c\x86\xef\x7d\x8a\xd0\xbb\x5d\xd8\xe3\x3a\xf6\xa2\xe0\x4d\x41\x7d\x81\xe8\xa4\xd3\x42\x97\x0e\x4d\x5c\x5d\x4a\xde\x5d\x06\xe9\xd0\x3d\x26\x7c\xf9\xf3\xfd\xad\x09\x9d\xd7\x8c\x42\x60\x23\xe1\x4c\xd5\xc9\x79\xcd\x16\x9c\xaa\x31\x00\x00\x53\x3c\xfa\xd6\xdc\x13\x0a\xba\x47\x14\x5a\x4a\xbd\xaa\x9e\xa0\xef\xde\x05\xab\xa8\xde\xf5\xf9\x85\x7e\xe5\x35\x04\x26\x51\x85\x12\x76\xee\xa3\x08\xe6\x37\xe2\xef\x2c\xac\x0a\x4b\x0a\x3c\x1d\xe2\xd1\xff\x7f\x19\x3d\x56\x5c\x88\xbb\xc6\x76\xdb\x55\x46\x88\x63\xf9\xd9\x32\x46\xce\x3d\xa7\xc0\xbb\xf7\x9c\x2e\xc0\x72\xcd\xf4\x60\xbf\x32\x61\x3d\xc1\x67\x91\x78\x6f\xfd\x74\x98\xd3\xc5\x1b\x33\xc6\x85\x52\xe4\xa6\xfb\x5f\x00\x00\x00\xff\xff\x54\x8b\x19\x09\x19\x01\x00\x00")

func usercategoryTmplBytes() ([]byte, error) {
	return bindataRead(
		_usercategoryTmpl,
		"usercategory.tmpl",
	)
}

func usercategoryTmpl() (*asset, error) {
	bytes, err := usercategoryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "usercategory.tmpl", size: 281, mode: os.FileMode(438), modTime: time.Unix(1580762095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _useruploadsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x4a\x04\x31\x0c\x80\xef\x7d\x8a\xd0\xbb\x5d\xd8\xe3\x3a\xf6\x24\x78\x53\xf0\xe7\x01\xa2\x4d\xb7\x85\x0e\x2d\x93\x38\x2a\x25\xef\x2e\x83\xcc\x50\x8f\x81\x2f\xdf\x97\xf4\x2e\x34\xb7\x82\x42\x60\x13\x61\xa0\xc5\xc9\xdc\x8a\x05\xa7\x6a\x0c\x00\xc0\x94\xce\xfe\xad\x95\x8a\x81\x2f\xd0\xbb\xbb\x47\x41\xf7\x22\xb8\x88\xea\xcd\x3e\x3f\xd2\xb7\x3c\xc5\xc8\x24\xaa\x50\xe3\xc1\xbd\x56\xc1\xf2\x4c\xfc\x59\x84\x55\xe1\x9a\x23\x4f\xa7\x74\xf6\x7f\xea\x31\xde\xf0\x4a\xbc\xb7\xb7\xdd\xbd\x3f\x42\x9c\xea\xd7\xe6\x18\x39\xf7\x90\x23\x1f\xc7\x86\xbc\x02\xcb\x4f\xa1\x3b\xfb\x51\x08\x97\x0b\xbc\x57\x49\xb7\xd6\x4f\xa7\x90\x57\x6f\xcc\xa8\x8b\xb5\xca\xbf\x87\x7f\x03\x00\x00\xff\xff\x5c\xeb\x50\x26\x0e\x01\x00\x00")

func useruploadsTmplBytes() ([]byte, error) {
	return bindataRead(
		_useruploadsTmpl,
		"useruploads.tmpl",
	)
}

func useruploadsTmpl() (*asset, error) {
	bytes, err := useruploadsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "useruploads.tmpl", size: 270, mode: os.FileMode(438), modTime: time.Unix(1580511346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitattributes": Gitattributes,
	"bindata.go": bindataGo,
	"error.tmpl": errorTmpl,
	"favorites.tmpl": favoritesTmpl,
	"footer.tmpl": footerTmpl,
	"gif.tmpl": gifTmpl,
	"header.tmpl": headerTmpl,
	"index.tmpl": indexTmpl,
	"pages.tmpl": pagesTmpl,
	"search.tmpl": searchTmpl,
	"showgifs.tmpl": showgifsTmpl,
	"templates.go": templatesGo,
	"user.tmpl": userTmpl,
	"usercategory.tmpl": usercategoryTmpl,
	"useruploads.tmpl": useruploadsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitattributes": &bintree{Gitattributes, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"error.tmpl": &bintree{errorTmpl, map[string]*bintree{}},
	"favorites.tmpl": &bintree{favoritesTmpl, map[string]*bintree{}},
	"footer.tmpl": &bintree{footerTmpl, map[string]*bintree{}},
	"gif.tmpl": &bintree{gifTmpl, map[string]*bintree{}},
	"header.tmpl": &bintree{headerTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"pages.tmpl": &bintree{pagesTmpl, map[string]*bintree{}},
	"search.tmpl": &bintree{searchTmpl, map[string]*bintree{}},
	"showgifs.tmpl": &bintree{showgifsTmpl, map[string]*bintree{}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"user.tmpl": &bintree{userTmpl, map[string]*bintree{}},
	"usercategory.tmpl": &bintree{usercategoryTmpl, map[string]*bintree{}},
	"useruploads.tmpl": &bintree{useruploadsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

