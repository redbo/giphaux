// Code generated by go-bindata.
// sources:
// .gitattributes
// bindata.go
// error.tmpl
// favorites.tmpl
// footer.tmpl
// gif.tmpl
// header.tmpl
// index.tmpl
// pages.tmpl
// search.tmpl
// showgifs.tmpl
// templates.go
// user.tmpl
// useruploads.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitattributes = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\x4b\x49\x2c\x49\xd4\x4b\xcf\x57\xd0\x4d\xc9\x4c\x4b\xe3\x02\x04\x00\x00\xff\xff\xe5\xa1\x25\x74\x11\x00\x00\x00")

func GitattributesBytes() ([]byte, error) {
	return bindataRead(
		_Gitattributes,
		".gitattributes",
	)
}

func Gitattributes() (*asset, error) {
	bytes, err := GitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitattributes", size: 17, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(1580507618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\x2b\xc9\x2d\xc8\x51\x52\xd0\xab\xad\xe5\xe2\xb2\x29\xb0\x0b\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\xcc\x53\x48\x2d\x2a\xca\x2f\x52\x28\x48\x4c\x4f\x55\xb4\xd1\x2f\xb0\x03\xc9\x56\x57\xeb\xb9\x24\x96\x24\xea\xf9\x16\xa7\xd7\xd6\x82\x05\xb9\x90\x4d\x4c\xcb\xcf\x2f\x41\x31\x11\x10\x00\x00\xff\xff\x68\x1e\x54\x0a\x6f\x00\x00\x00")

func errorTmplBytes() ([]byte, error) {
	return bindataRead(
		_errorTmpl,
		"error.tmpl",
	)
}

func errorTmpl() (*asset, error) {
	bytes, err := errorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.tmpl", size: 111, mode: os.FileMode(438), modTime: time.Unix(1580482281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _favoritesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\xc5\x30\x10\x45\xf7\xf9\x8a\x21\x7b\xf3\xe0\x2d\x6b\xcd\x4a\x74\xa7\xa0\xfe\xc0\x68\x27\x4d\x20\x25\x25\x33\x56\x25\xcc\xbf\x4b\x91\x96\xb8\x1c\x38\x73\xee\xbd\xad\x09\x2d\x6b\x46\x21\xb0\x91\x70\xa2\xea\x64\x59\xb3\x05\xa7\x6a\x0c\x00\xc0\x18\xaf\xfe\x01\xb7\x52\x93\x10\x0f\xd0\x9a\xbb\x47\x41\xf7\x2a\x58\x45\xf5\xe6\xb8\x9f\xe8\x5b\x9e\x43\x60\x12\x55\x28\xe1\xe4\xde\x8a\x60\x7e\x21\xfe\xcc\xc2\xaa\x30\xa7\xc0\xe3\x25\x5e\xfd\x9f\xbc\x8f\x5f\x71\x26\x3e\xd2\xf7\xdf\xa3\x41\x0f\x71\x2c\x5f\xbb\xa3\xe7\xdc\x63\x0a\x7c\xd6\x9d\xd2\x06\x2c\x3f\x99\xee\xec\x47\x26\xac\x03\xbc\x17\x89\xb7\xd6\x8f\x97\x29\x6d\xde\x98\x5e\x17\x4a\x91\x7f\x93\x7f\x03\x00\x00\xff\xff\xe9\xba\x7b\xbc\x10\x01\x00\x00")

func favoritesTmplBytes() ([]byte, error) {
	return bindataRead(
		_favoritesTmpl,
		"favorites.tmpl",
	)
}

func favoritesTmpl() (*asset, error) {
	bytes, err := favoritesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favorites.tmpl", size: 272, mode: os.FileMode(438), modTime: time.Unix(1580507411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x5c\x80\x00\x00\x00\xff\xff\x55\x33\xd2\x97\x17\x00\x00\x00")

func footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_footerTmpl,
		"footer.tmpl",
	)
}

func footerTmpl() (*asset, error) {
	bytes, err := footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl", size: 23, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gifTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xd1\x6e\xab\x38\x10\x7d\xcf\x57\x8c\xbc\xd5\x6a\x57\xda\xc0\xaa\xda\x27\x02\xec\xc3\xad\x7a\xd5\xa7\x5e\xdd\xb6\x1f\x30\xe0\x01\xac\x82\xcd\x35\x43\xda\x08\xf1\xef\x57\x10\x20\xa4\x49\xd3\xaa\x91\xaa\x56\xaa\x48\x1c\xcf\xf1\x99\x33\x73\xc6\x34\x0d\x53\x51\xe6\xc8\x04\x22\x23\x94\x64\x1d\x2e\xca\x5c\x80\xd3\xb6\x8b\x85\x2f\xd5\x1a\x2a\xde\xe4\x14\x88\x02\x6d\xaa\xf4\x92\x4d\xe9\xc1\x7f\xff\x96\xcf\x2b\x11\x2e\x00\x00\xfc\xec\x72\xdc\x92\xe4\x06\xd9\x83\x9c\x12\x5e\xc1\x76\xbf\x07\xdb\xad\x4d\xe3\x5c\x21\xa3\x73\xaf\x38\xa7\xb6\xf5\xdd\xec\x72\x08\x9f\x1d\x31\xc4\x5b\x95\x66\x3c\xc2\x77\x7f\x4d\x63\x51\xa7\x04\x03\x04\xa6\x55\xdb\x4e\x3f\xf6\x20\x08\x71\x8e\x55\x15\x08\xc6\x54\x40\x66\x29\x09\x84\x5b\x11\xda\x38\xfb\xff\x57\xc0\x98\x7a\x4d\xe3\xb4\xad\x08\xff\xe8\x9f\xbe\x8b\x73\x74\xd2\x72\x00\xf4\x5d\xa9\xd6\xe1\x62\x7c\xcc\xb8\x31\x3d\xf3\x12\x73\x95\x6a\x0f\x62\xd2\x4c\x76\x15\xe7\x84\xd6\x83\xc8\x70\xd6\xb1\xf5\x55\x91\x42\x65\xe3\x40\xb8\xa9\x4a\xdc\x31\xe3\x9b\xab\xb6\x75\x52\x95\x88\x09\x76\xe1\x47\x36\xec\xfe\x17\x8b\xa6\x51\x09\x38\x0f\x15\xd9\x4e\xee\x2d\x9b\x6e\xa5\x8f\xec\x96\x6f\x74\x62\x9c\x6b\x5c\x1b\xab\x98\xe4\xb8\xa9\xa7\x5a\x86\xfb\x1a\x24\xc6\x16\xa3\x0c\x11\x56\x2a\xee\x16\x04\x60\xcc\xca\xe8\x40\xb8\x75\x45\xd6\xad\x4b\x89\x4c\x31\x32\xa5\xc6\x2a\xaa\x04\x14\xc4\x99\x91\x81\xf8\x71\x7b\x77\x2f\xf6\x21\x7b\x58\xa5\xcb\x9a\x81\x37\x25\x05\x22\x53\x52\x92\x16\xa0\xb1\xa0\x40\xa4\x2a\x51\x52\xc0\x1a\xf3\x9a\x02\x31\xcf\xf7\x08\xce\x58\xc3\x8b\x47\xda\xfc\x03\x17\x7d\x10\x78\xc1\xcb\x54\xbf\x4d\xcc\x5e\x94\x78\xe2\x93\x63\x44\xf9\xbc\xdc\x87\x67\xed\xce\x54\xc9\x70\xd4\x2b\x68\x47\xb3\x8c\x33\x8a\x1f\x23\xf3\x3c\xe6\x19\x23\x2f\x9b\xa6\x23\xde\xb6\x62\xdf\x0e\xdb\xf6\x86\x12\xa5\x54\x3a\x1d\xbe\x3d\x29\xc9\x99\x07\x58\xb3\x59\x4d\xf2\x18\x2d\xa0\x07\x26\x19\xc2\x88\x76\x82\x39\xe5\xd5\x97\x20\xfd\x3e\xb2\x93\x81\x0e\x38\xba\x7d\xbd\x8e\xf5\xc3\xf1\xa0\xde\x73\x43\x75\xad\x79\x12\xa1\x1f\xd5\xcc\x46\x0f\x69\x56\x75\x54\x28\x16\xe1\x43\xdf\xc7\xb0\x6b\x17\xf0\xd5\x18\x96\x20\x24\xb8\x24\xd9\xed\xf3\x5d\x15\xfa\xee\x16\x22\x1c\xfc\xb7\xcf\xaf\x73\xc9\x6e\xcd\x77\x67\xb6\xfa\xa0\xc5\x74\x32\xf8\xf5\xd3\xcc\xf5\x4e\xd1\x7e\x52\x61\xd6\x04\xd7\xd6\x14\x30\xce\x94\x43\xe1\x32\x42\xcb\x4b\xf3\x41\xed\x86\x21\x36\xb4\xef\x99\x52\x7e\xba\x90\x70\x7c\xc2\xfc\xd9\xbb\x6b\x05\x23\x9f\xea\xd5\xb6\x86\xf9\x75\xd5\x4d\xb5\xb7\x27\xda\x2b\x67\x9e\x6b\x7d\xe7\x7c\xdf\x3b\xa7\x18\x9f\x56\xe0\x2c\x73\xdf\xe1\x9a\xe0\xde\xbc\xd5\xa3\x67\x76\xa8\x96\xa7\xee\xdc\xdb\x27\xdd\x5f\xca\x53\xe8\x87\x1a\x58\x52\x4e\x5f\x6f\x0e\x5c\xf5\xac\xe0\xfb\xcd\x35\xfc\xb5\x31\x35\xa0\x25\xe0\x8c\xc0\x74\x39\xff\x7d\x20\x76\x84\xfa\x8c\x41\x3a\x29\x3d\xfb\xb0\x7b\xe7\x4c\x8c\xe1\xbd\x77\xce\xdf\x01\x00\x00\xff\xff\xae\xd4\x3a\x67\x91\x0a\x00\x00")

func gifTmplBytes() ([]byte, error) {
	return bindataRead(
		_gifTmpl,
		"gif.tmpl",
	)
}

func gifTmpl() (*asset, error) {
	bytes, err := gifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gif.tmpl", size: 2705, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\xe3\xb8\x11\xbe\xeb\x57\x20\x74\x25\xb6\xa7\x24\xd2\xf2\x58\xb3\x59\x8a\x52\xd5\xc6\xd9\xcc\x4c\x55\x0e\x9b\x9d\xdd\xaa\x54\xa5\xf6\xd0\x02\x9a\x24\xc6\x20\xc0\x00\xa0\x1e\x71\xf9\xbf\xa7\x40\x52\x14\x9f\x9e\x99\x3d\xe4\x14\x1d\x6c\x11\x8f\xee\x0f\xfd\x7d\xdd\x0d\x2a\x4a\x6d\x26\xb6\xb3\x28\x45\x60\xdb\x59\x64\xb9\x15\xb8\x7d\xcf\xf3\x14\xa1\x38\x46\x41\xf5\x3c\x8b\x04\x97\x4f\x44\xa3\xd8\x78\xc6\x9e\x04\x9a\x14\xd1\x7a\x24\xd5\x18\x6f\xbc\xd4\xda\xdc\x84\x41\x40\x99\xfc\x6c\x7c\x2a\x54\xc1\x62\x01\x1a\x7d\xaa\xb2\x00\x3e\xc3\x31\x10\x7c\x67\x82\x58\x49\xbb\x80\x03\x1a\x95\x61\xf0\xe0\x7f\xe7\xdf\x05\xd4\x74\x87\xfd\x8c\x4b\x9f\x1a\xe3\x6d\x67\x51\xe9\x67\x3b\x23\x84\x90\x9d\x62\x27\xf2\x5c\x7e\x75\x9f\x0c\x74\xc2\x65\x48\xee\xd6\xcd\x50\x69\x24\x86\x8c\x8b\x53\x48\x7e\xd0\x1c\xc4\x9c\x7c\x40\xb1\x47\xcb\x29\xcc\x89\x01\x69\x16\x06\x35\x8f\x2f\x5b\x76\x40\x9f\x12\xad\x0a\xc9\x16\x54\x09\xa5\x43\xb2\x13\x40\x9f\x2e\x0b\xea\xd1\x43\xca\x2d\x5e\x46\x2d\x1e\xed\x02\x04\x4f\x64\x48\x28\x4a\x8b\xba\x9a\x7b\x29\xff\x5e\x51\x25\x2d\x4a\x6b\x5a\x70\x19\x37\xb9\x80\x53\x48\xb8\x14\x5c\xe2\x62\x27\x54\xdb\xcd\x81\x33\x9b\x86\x64\x79\x77\xff\x90\x1f\xc7\xfd\x08\x8c\xed\x65\x26\x57\x86\x5b\xae\x64\xe8\xf8\x00\xcb\xf7\xd8\x41\x60\x55\x2e\x61\xdf\xf2\x9f\x03\x63\x5c\x26\xce\xc5\xd9\x41\x77\x29\xb4\x16\x97\x6e\x19\x52\xa5\xa1\xf2\x21\x95\xc4\xd7\x62\xd2\x33\xe5\xc7\x4a\x67\xa5\x58\xfa\x7c\x2d\xac\xca\xdb\x18\x5a\x33\xee\x7c\x21\xe9\x1c\x3f\x16\x0a\x6c\x48\x34\x4f\xd2\xf6\xd1\xcf\x47\x79\xd7\x5e\x3b\x4e\xdf\x90\x5f\x06\xfa\x29\xd1\x70\x1a\x03\x9e\x2e\x5b\x80\x4b\x35\x19\xfe\x1f\x0c\xc9\xc3\xaa\xed\xa9\x47\x65\xc7\x90\x50\x89\xfa\x1a\x1b\x17\x5c\x21\x59\x1c\x70\xf7\xc4\xed\xc2\x19\x03\xbd\x48\x34\x30\x8e\xd2\xde\x3c\xac\x18\x26\x73\x42\x4f\x20\xe7\x24\xd1\x88\x72\x4e\x4e\x28\x84\x3a\xcc\x49\x06\x09\x4a\x0b\xb7\x17\x8b\x67\x2b\xed\x13\x0b\x9e\x87\x25\x99\xc3\x65\x25\xc5\x31\x17\xe2\x1c\x17\xab\x41\x9a\x1c\x34\x4a\xdb\x39\x91\x41\xd0\x34\x75\x8a\x06\x2e\x51\x4f\x31\xba\xea\xa9\xaa\xbf\x8d\xcb\xbc\xb0\xad\xcd\xb5\xe0\xbf\x5f\x75\xa4\x90\xa2\xa3\x3a\x24\x0f\x9d\xd1\x86\xf0\xfb\xce\xf0\x4e\x69\x86\xba\x2f\xce\x56\xc8\x97\xdf\x7d\x01\xd4\xae\xb0\x56\xc9\x21\xaa\xaf\x01\xd5\x66\xf0\x8a\x31\x36\x8a\xe0\xfe\xfe\xcb\x80\x69\xa1\x8d\x23\x20\x57\x7c\x50\x48\xc6\x01\x87\xa9\xda\x77\x98\xe8\x60\xa1\x94\xb6\x6d\xf8\x75\x31\x5a\x54\xde\x9b\x5d\x2d\x9d\x70\xa7\xa6\x90\xbc\xaa\xbf\xbc\xd0\xb9\xc0\x39\xd9\x73\x25\xd0\x36\xba\x3b\xc7\xa6\x5f\x55\xfc\x1d\x18\x4e\x5d\x19\x20\xcf\x4d\xbe\x54\x35\x6f\x24\x27\xaf\x56\xab\xd5\xba\x55\xa2\x9c\x98\x2e\x05\x3e\x3f\xae\x07\x46\xd3\xfb\x91\x56\x50\x82\x98\xac\xcd\x7d\xc9\x4e\x23\xf6\xb5\x3a\x10\x3f\xe6\x28\xd8\x84\x17\xb7\x99\xac\xf2\x23\xb9\x9f\x34\x52\x0a\x7e\xde\x1e\x19\xa8\xad\x39\xf0\x6a\x58\x0e\x5b\xf8\x48\xbb\x3f\xdc\xfd\xb1\xaf\xa7\x85\xe3\xab\x30\xbd\xd2\x79\xd6\x5a\xc7\xca\x32\x3f\x12\xa3\x04\x67\xe4\x6a\xb9\x5c\xbe\x06\xfc\x5f\xf6\x94\xe3\xc6\x14\xbb\x8c\xdb\xdf\xe6\x13\xd3\xd5\x81\x7e\x7b\xfd\x90\x63\x6c\xef\xde\xad\xbb\x4d\xa4\xca\x99\x43\x2d\xa6\x9d\x12\x6c\xdd\x49\x64\x7f\x89\xd9\x7a\x90\x29\x1d\x3a\xdf\xf6\x72\x5d\xa8\x84\x4b\x07\x69\x4e\xae\x34\x26\xdc\x58\xd4\x95\x1e\x87\x85\xbc\x57\x41\x46\xbb\xce\x39\xa0\x97\x18\xf6\xee\x04\x97\x8e\x0c\x3b\xa3\x44\xd1\xb9\x2f\x0c\xbb\x5e\xcd\xe8\xbb\xbb\xce\xa8\xae\x22\xd0\xd7\xa6\x85\xe4\xf5\x90\xbe\xfd\xf3\xe3\x48\xbd\x5c\x0d\x15\xd1\xa8\x65\x54\x73\x6f\x07\x97\x8f\x6f\xb9\x05\x8c\x87\xe9\x0a\x00\xfa\xc5\xd1\xdd\xea\x42\xc2\x2d\x08\x4e\x27\x1b\xeb\xe0\x8e\xe4\x3c\x2d\x4c\x0e\x14\x1d\x96\x83\x86\x7c\x10\xa4\x29\x86\xc7\x2d\x0e\x52\xad\x6f\x69\x32\x65\xa7\x2f\x30\xcb\x89\x2e\x31\xd9\x67\xc9\x54\xb6\xd6\x1b\x84\x93\xc4\x4e\x14\x5f\xd7\x32\xfa\xd8\x87\xbd\xe2\x15\x57\x3d\x2e\x27\xdc\x44\x41\x7d\x2b\x9f\x45\x86\x6a\x9e\xdb\xea\x7e\x1e\x17\x92\x3a\x9d\x10\xaa\xf2\xd3\x2f\x78\xb4\x37\x9c\xdd\xb6\x1c\x07\x6f\xc8\x7b\xb4\xc4\xa6\x58\x2a\x8b\x54\xf5\xf5\x4d\xd0\x2c\xd8\x83\x6e\xf6\x92\x0d\x61\x8a\x16\x19\x4a\xeb\x27\x68\x7f\x14\xe8\xbe\xfe\xe5\xf4\x91\x39\xab\xeb\xd9\xac\xb1\xf9\x09\x05\xd2\x69\xb3\x67\x83\xbe\x29\xd7\xdd\x34\x9d\xab\x35\x61\x2b\x1b\x5c\xc9\x9f\x41\x26\x78\x73\x37\x27\xdf\xbb\xcf\xed\x9a\x04\x6f\xfe\xa6\x34\xc9\xd4\x8e\x0b\x24\x0c\xf7\x9c\xa2\x79\x13\xb4\xdc\x3f\xaa\xfc\x74\x71\xce\xa5\xe1\x0c\x27\xc1\x34\x47\xc2\x23\xd2\x47\x95\x65\x20\xd9\x8d\xe7\x90\x78\x0d\x2e\x8d\xb6\xd0\x92\xc4\x20\x0c\xb6\x22\x5e\x07\x7a\x16\x05\xf5\x3b\x9a\x7b\x1d\xda\xce\x22\xc6\xf7\x84\xb3\x8d\x77\x7e\xe5\xf0\x2a\x32\x9a\xf1\xa6\x0c\xd6\x13\xe5\x64\xa9\x0f\x2a\xc0\x98\x8d\xd7\x94\x6e\x8f\x40\x19\x83\x8d\x17\x94\x9b\x3c\x92\xa1\x4d\x15\xdb\x78\xb9\x32\xb6\xb5\xbd\x34\x91\xde\x6f\xff\xae\x12\xf2\x51\x46\x41\x7a\xdf\x9b\x73\xbe\x6b\xeb\x5a\x1d\xbc\x6d\x7b\xa0\x8c\x88\xb7\xfd\xd5\xa0\x96\x90\x61\x14\x30\xbe\xdf\x46\xd5\xed\xb0\x6c\x2a\x9e\x0b\x9c\x47\xdc\xe4\xc6\x2b\xea\x65\xde\xe5\x2c\xcd\xd0\xb6\xda\xfb\xcd\xae\x7f\x02\x63\x0e\x4a\xb3\x11\xd7\x79\x3d\x75\x76\xdf\x3c\xff\x5e\x5f\x9f\xca\x06\x3a\xe2\xa9\xea\xac\x1e\xd9\x83\x28\x70\xe3\x55\xa1\x24\x7f\xd2\xa0\xf5\xfa\xec\xbd\x5e\xd3\xf7\x1d\x05\x8e\xad\x9a\xe6\xcb\x54\xc3\x78\xbb\xd9\x7d\x0b\xe9\xe7\x7d\x5f\xe4\xfd\x51\x23\x58\x24\x8e\xc2\xff\x21\xf9\x67\x78\xff\xe7\xff\x0b\xfc\x57\xef\xb2\x6d\xe6\xd3\xe5\x36\x82\xfa\x67\x9a\xc0\xdb\x46\xfc\x9c\x4d\xca\x6b\xf0\x02\x89\x61\x41\x21\x43\x0d\x0b\x8d\x56\x2b\xe7\x97\x6f\xc9\xfb\x8f\x3f\x7d\xf8\xe1\xd7\x7f\x46\x01\x6c\xa3\x20\x5d\x5e\xac\x3e\x3f\xf3\x98\xf8\x8e\xca\x97\x97\x6e\x5c\x1a\x57\xbb\x13\x5e\x1c\xd4\xbf\x08\x78\xae\x6c\xa8\xc2\x3a\x83\x13\xdb\x1c\xc3\xc1\xc8\xc6\x0f\x2a\xc3\x90\x3c\x3f\x97\x4e\xfd\xb3\x88\x5e\x5e\x3a\xa6\x9e\x9f\x51\x18\x1c\x42\xea\x5b\x23\x4a\x3e\x0a\x4e\x9f\x36\xde\x67\xd8\x43\x55\x5e\xc3\x5e\xa7\xb9\x6e\x8a\xe7\xf5\xad\x5f\xf6\x3c\xbf\xbe\x50\x6c\xae\xcb\x9b\xc4\xf5\x7a\x74\xc7\x59\xa2\xd7\xb7\x7e\xac\x68\x61\x6e\x6e\xd7\x5e\x53\x2d\x87\xc7\xfe\x5d\xd0\xda\x59\x3e\x89\x6e\x00\xaf\x9f\x44\x1d\x84\x3f\xd7\x93\xfd\x78\x4a\x56\x87\xb3\xaf\xb6\x1a\x78\xf7\x05\xb3\xa3\xd7\x46\x94\xbd\x17\xd9\x41\x5d\x6a\xaa\x50\xb5\xf0\x52\x83\xde\xff\xf8\x4b\xbf\x04\x55\x79\x54\xe5\xc8\xbf\xbd\x4e\xe1\xc8\x05\x50\x4c\x95\x60\xa8\x37\xde\xa7\xd2\x94\xbb\x0c\x91\x84\xc7\x86\x80\x64\xc4\xd8\x22\x8e\xff\xd0\xe4\x5d\x25\xe2\xbf\x82\x85\x97\x97\xea\xfb\x3f\x0a\xd4\x27\xf7\x50\x8e\x5e\x1e\xcb\x28\xd4\xff\xfa\x80\xea\x5b\x62\x27\xb3\x5d\x96\x75\x72\xab\x3e\x58\x99\x55\x51\x50\x6d\x79\x35\xa9\xff\x1b\x00\x00\xff\xff\x4e\x00\x87\xd1\x94\x15\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 5524, mode: os.FileMode(438), modTime: time.Unix(1580482281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\x2b\xc9\x2d\xc8\x51\x52\xd0\xab\xad\xe5\xe2\xb2\xc9\x30\xb6\x0b\x29\x4a\xcd\x4b\xc9\xcc\x4b\xb7\xd1\xcf\x30\xb6\xe3\xe2\x42\xd6\x50\x9c\x91\x5f\x9e\x9e\x99\x56\x0c\xd3\xe2\x92\x58\x92\xa8\xe7\x9c\x58\x92\x9a\x9e\x5f\x94\x99\x5a\xac\x07\xd3\x0a\x33\x2a\x28\x35\x39\x35\xaf\x44\x21\xb4\x20\x27\x3f\x31\xa5\x98\x0c\x03\xa1\x3a\x41\xe6\x21\x6b\x4b\xcb\xcf\x2f\x41\x71\x38\x20\x00\x00\xff\xff\xcf\xe5\x6d\xa6\xd6\x00\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 214, mode: os.FileMode(438), modTime: time.Unix(1580505856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x50\x50\x50\xb0\x49\x54\xc8\x28\x4a\x4d\xb3\x55\xb2\xcf\x4f\x4b\x2b\x4e\x2d\xb1\x35\x50\x2b\xb4\xad\xae\xd6\x0b\x2c\x4d\x2d\xaa\xac\xad\x55\xb2\x0b\x2e\x49\x2c\x2a\xb1\xd1\x4f\xc4\xa1\xbc\xba\x5a\x2f\xa0\x28\xb5\xcc\x1f\xcc\xab\xad\xad\xae\xce\x4c\x53\x80\x69\x46\x31\xa9\xba\x3a\x35\x2f\x05\x64\x20\x48\x39\x5e\xf3\xfc\x52\x2b\x4a\x48\x30\x0f\xa4\x1c\x6c\x9e\x8d\x3e\xd8\x57\x80\x00\x00\x00\xff\xff\x9e\x24\xdd\xab\xdc\x00\x00\x00")

func pagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_pagesTmpl,
		"pages.tmpl",
	)
}

func pagesTmpl() (*asset, error) {
	bytes, err := pagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages.tmpl", size: 220, mode: os.FileMode(438), modTime: time.Unix(1580506542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x21\x77\xb3\xb0\xc7\xb5\xe6\x24\x78\x53\x70\x7d\x81\x71\x3b\x69\x02\x29\x29\x99\xb1\x2a\x61\xde\x5d\x8a\xb6\xc4\xe3\xc0\xf7\xff\xf3\xfd\xad\x09\xcd\x4b\x46\x21\xb0\x91\x70\xa4\xea\x64\x5e\xb2\x05\xa7\x6a\x0c\x00\xc0\x10\xcf\xfe\x4a\x58\x6f\x11\x5e\x89\x3f\xb2\xf0\x05\x5a\x73\x8f\x28\xe8\xae\x82\x55\x54\xef\xf6\xfb\x99\xbe\xe4\x25\x04\x26\x51\x85\x12\x0e\xee\xad\x08\xe6\xbf\xb4\x2a\x4c\x29\xf0\x70\x8a\x67\xff\xfb\xa1\x77\x58\x70\x22\xde\x15\xb6\xec\xae\xd1\x43\x1c\xcb\xe7\xd6\xd1\x73\xee\x29\x05\x3e\x9c\xc7\xb4\x02\xcb\x77\xa6\x07\x7b\xcb\x84\xf5\x02\xef\x45\xe2\xbd\xf5\xc3\x69\x4c\xab\x37\xa6\xaf\x0b\xa5\xc8\xbf\xdd\x3f\x01\x00\x00\xff\xff\xf6\xaf\xbc\xa7\x15\x01\x00\x00")

func searchTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchTmpl,
		"search.tmpl",
	)
}

func searchTmpl() (*asset, error) {
	bytes, err := searchTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search.tmpl", size: 277, mode: os.FileMode(438), modTime: time.Unix(1580504572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _showgifsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\xc1\x6e\xc3\x20\x14\xbb\xef\x2b\x2c\x7a\x4e\xd2\x66\xca\x85\xa4\xb9\x6c\x97\x7d\x06\x0d\x84\x3c\x8d\x02\x22\xac\xcb\x84\xf8\xf7\x49\xb4\xd9\xa6\x71\x7b\xb6\x6c\x6c\x03\x40\x4a\x41\x58\xad\x50\x23\xe7\x27\x3c\xde\x20\xe9\x86\x35\x7e\x19\x75\x66\x8b\x22\xbd\x44\x8e\xe7\xe3\xd1\x6f\x3d\x3e\x49\xc6\x85\xa3\xed\xca\x75\x11\xd3\xbb\x0e\xee\xc3\xca\x6a\x72\xc6\x05\x8e\x43\xdb\xb6\x3d\xa2\xda\x62\x25\x0c\x69\xcb\x31\x29\x1b\x55\xe8\xe1\x85\x94\x64\x35\xc7\xa9\x48\xaf\x22\x68\xb2\x1c\x5d\xf1\x71\x41\xaa\xc0\x71\xf2\x1b\x56\x67\x48\xe2\xd0\x75\x5d\x8f\xd9\x38\x11\x39\x8c\x9a\x63\xcf\xc6\x9f\x7c\x25\xa3\xc0\x12\xd4\x7c\x66\x8d\xa6\x79\x6d\x52\xaa\xdf\x5e\x73\x66\xe3\x40\x57\x8d\x35\x4c\x77\x62\xc7\x6b\x4d\x33\xdb\x2b\x5d\xc5\x56\xed\x3d\x8e\x8f\x30\x5b\xb5\x17\xbd\x43\x6c\x1c\x1a\xf1\xef\x47\x3f\xa6\x54\xbf\x08\x1f\xc9\xd9\x9c\x87\xc6\xff\xf2\x43\x23\xe9\x76\x3f\x53\x52\x56\x3e\xc6\xfc\x3b\xe4\x64\x94\x08\x1c\x17\x17\x97\xe2\x5e\x04\xdf\x01\x00\x00\xff\xff\xbc\xa2\x78\x8d\x83\x01\x00\x00")

func showgifsTmplBytes() ([]byte, error) {
	return bindataRead(
		_showgifsTmpl,
		"showgifs.tmpl",
	)
}

func showgifsTmpl() (*asset, error) {
	bytes, err := showgifsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "showgifs.tmpl", size: 387, mode: os.FileMode(438), modTime: time.Unix(1580506417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\x9b\x40\x10\x85\x6b\xf6\x57\x4c\xa8\x96\x88\xc3\xbd\x23\x17\x69\x52\x25\xa7\x14\xe9\x4e\xa7\x68\x0c\x03\x5e\x79\xd9\x45\x33\x8b\x22\xcb\xe2\xbf\x47\xb3\x80\x9d\x74\xd7\x50\xbc\x79\xfb\xcd\x7b\xc3\x84\xed\x15\x07\x82\x44\xe3\xe4\x31\x91\x18\xe3\xc6\x29\x72\x02\x6b\x8a\xf2\x92\x46\x7f\xd8\x47\xa5\xa9\x8c\x39\x1c\x86\x78\x1c\x28\x10\x63\x22\x18\xe2\xcb\xd9\x85\x0e\x13\xc2\xcb\x74\x1d\x9e\x14\x68\xd4\x0a\xdf\x23\x76\xbf\x1e\xda\x84\x2c\x24\x80\xde\xff\x63\xec\x39\x8e\xb0\x03\x3b\xd8\x71\x18\x3a\x60\x4a\x33\x07\x81\x74\xa1\x11\x50\x00\x41\x66\x97\xa8\x31\xfd\x1c\xda\xff\xd9\xb6\x02\xfb\x79\x87\x36\xbb\x5c\x03\x31\x47\xae\xe0\x6e\x0a\x7d\xf3\x03\x27\x38\x9e\x60\xc4\xe9\x4d\x12\xbb\x30\xbc\xbb\x90\x88\x7b\x6c\xe9\xbe\xdc\x4d\x51\x94\x6d\x0c\x09\x5d\x90\xf2\x08\xfa\xc0\x06\xa2\xce\x13\xac\xee\x1a\x2e\x78\x93\x84\xed\x15\xde\xde\x57\xa9\x82\x73\x8c\x5e\xf9\x45\xd1\x47\x86\xdf\x35\x88\xae\x60\x0c\x03\x3d\xed\x79\x5e\xb8\x1e\x36\xde\xe9\x04\xb2\x89\xc5\xda\x12\x12\xcf\x94\x85\xc5\xec\x9f\x6d\xd2\xa3\x17\x1d\x2d\xb5\x51\x9d\x63\x4c\xba\xe2\xd1\xf6\x95\xfe\xd8\xf2\x50\x56\xcd\xb7\x39\xb4\x62\xb7\xa2\x95\x79\x04\xe2\xf6\x19\xe9\xab\x08\xa5\x57\x1c\xf3\xc9\x34\x81\xeb\xe1\x1c\xbb\x5b\x3e\x95\xda\xb2\xc1\x0a\xb7\xd5\x97\x2c\x7d\x3a\x41\x70\x5b\xc3\x2d\x50\x70\x3e\xdb\x35\x13\x90\x17\x02\xd7\xeb\xa2\x8d\xa0\x01\x73\x28\x85\x34\x3f\xf5\xa7\xdb\xf5\x5a\x56\x37\x55\x1f\x03\xaf\x5d\x57\x5d\x89\xb5\x4e\xcd\x62\xfe\x06\x00\x00\xff\xff\x38\x6a\x1f\xdb\xb1\x02\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 689, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\xc7\xf6\xce\x09\x9a\xc8\x49\x8a\x5c\x0a\x7f\x1d\xda\xdc\x76\x37\x28\xd0\x06\x68\x0a\xec\x62\xb1\x0f\x94\x34\x92\x88\xd0\xa4\x4a\x52\x71\xb4\x86\xff\xf7\x05\xa9\x2f\xca\x72\x1c\xa3\x8b\xcd\x8b\xc5\xe1\x70\x7e\xf3\x4d\x4e\xd6\x6b\x83\xcb\x9c\x53\x83\x40\x32\xa4\x31\xaa\xc0\x2c\x73\x4e\x20\xd8\x6c\x8e\x8e\x66\xda\x94\x1c\x17\x47\x00\x00\x81\xa1\x21\x67\xe2\x01\xd6\x6e\x69\xff\x42\x1a\x3d\xa4\x4a\x16\x22\x3e\x8b\x24\x97\x6a\x02\xaf\xae\xae\xae\xa6\xed\x7e\x4d\x5c\x65\xcc\x60\x47\x4d\xb8\xa4\x66\x02\x1c\x13\xd3\x11\x43\xa9\x62\x54\x13\x10\x52\x78\xac\xb2\x30\x9c\x09\xdc\x26\x47\x85\xd2\x56\x70\x2e\x99\x30\xa8\xba\x8d\x9c\xc6\x31\x13\xe9\x04\x2e\xce\xf3\xa7\x8e\xbc\xa4\x2a\x65\x62\x02\xe7\xf9\x13\x5c\xe5\x4f\xee\xb7\xc7\x90\x48\x61\xce\x34\xfb\x13\x27\x70\x71\xed\x6f\xac\x58\x6c\xb2\x09\x5c\xbc\xfb\x77\x45\xdb\xf4\x5c\x31\xc9\xe4\x23\xaa\xfd\x0e\xb9\xbe\xbe\xde\x3e\x1a\x49\x61\x50\x18\xef\xdc\x6e\x47\xc5\x4c\xe7\x9c\x96\xdb\xd6\xb7\x46\x5e\xf6\x6c\x68\x3c\xf8\x36\x7f\x02\x2d\x39\x8b\xb7\x82\xb1\x64\xe2\x2c\x43\x96\x66\x66\x02\x57\xe7\xbd\xa3\x11\x47\xaa\x26\x10\x4a\x93\x35\xba\xce\xc6\x75\xe8\x8f\x66\x31\x7b\xac\x32\x60\x16\x16\xc6\x48\x01\x2c\x9e\x13\x43\xc3\x5f\xe4\x12\x09\x44\x9c\x6a\xed\xd6\xd6\x23\x04\xa4\x88\x38\x8b\x1e\xe6\x44\xe6\x28\xee\x68\x8a\xc7\x23\xcb\x78\x4f\xc3\xd1\x29\x98\x8c\xe9\x93\x29\x97\x11\x35\x4c\x8a\x20\x53\x98\xcc\x47\xaf\xec\xfe\x68\x4a\x16\xf6\x77\x36\xae\x40\x76\x22\xde\x50\x83\xa9\x54\x0c\xf5\x41\xb8\x1d\xfb\x3e\xf4\x8e\xcb\xea\xd0\xad\xf6\x6a\xf2\x2d\xe7\x92\xc6\x07\x69\x51\xb1\xee\xd3\xa0\xe2\xb0\xe8\xd5\x17\x7c\xc6\xd5\x5e\xf4\xf7\x77\xb7\x9f\xb0\x3c\x08\xbd\x62\xdd\x87\x5e\x71\x58\xf4\xf7\x77\xb7\xf0\x09\xcb\x0e\x7a\x36\x76\xb1\x77\x29\xe0\xb0\xeb\x48\xfa\xc8\x75\x32\x93\x5a\xd1\xec\xed\x62\x46\xc1\x89\x26\xe3\x42\xa3\x1a\x17\xce\x26\xdd\x18\xa7\x67\x63\xba\x98\x8d\xb3\xb7\xd5\x01\xbf\xff\xe8\x4c\xae\x52\x96\xe8\xa6\x03\xfd\x9f\x1a\x1a\x74\x01\x09\x6a\x01\xb6\x31\x3d\x83\x95\xd0\x47\xa9\x98\x41\x4d\x16\x1f\x9b\xcf\x1f\xc7\x6b\x45\x34\x88\xeb\xb5\xa2\x22\x45\x78\xfd\x80\xe5\x29\xbc\x7e\xa4\xbc\x40\x98\xcc\x07\x27\x37\x9b\xb6\xb4\xd6\xeb\x15\x33\x99\x3b\xe1\x51\xab\x1d\x96\x00\x7e\x87\x00\x48\x6d\x18\x81\x01\x0b\x72\x8d\x5b\xc4\xad\xb3\xad\x92\x64\x27\xdf\x33\x02\x86\xfe\x8b\x2a\xed\xcb\xf1\x7a\x1d\x6c\x36\x64\xe1\x7e\xfa\xbe\x1b\x4a\x7f\xd6\x97\x95\x6f\x76\x6b\x24\xe2\xa1\x99\x3d\x9a\xbf\x6e\xbe\x07\xa9\xd8\x2b\xee\x3d\x09\x99\x48\xb5\x6c\x76\x43\xaa\x59\x64\x09\x04\x68\x64\x6b\xa0\xc9\x1b\x1a\xc7\x8d\xfd\x04\x96\x68\x32\x19\xcf\x49\x2e\x75\x23\xa5\x72\xd7\xe5\xe2\x7d\x1c\x03\x05\x81\x2b\x68\xd8\xff\x35\x1b\x67\x97\x1e\x93\x55\xaf\x46\x53\x72\x45\x16\x3e\x21\x61\xc8\xe3\xb6\xc5\x94\x95\x49\x33\x26\xf2\xc2\x80\x29\x73\x9c\x13\x83\x4f\x86\x80\xa0\x4b\x9c\x93\x56\xa1\x45\x6d\xfb\xf3\x18\xbe\x08\x5d\x84\x4b\x66\x08\xb8\x00\xcc\xc9\x57\xb7\x84\xff\xbc\x7a\xf7\xdf\x77\x97\xd3\x9e\xac\xd9\xd8\xba\xa2\xab\xdb\xdf\x64\xa1\xa0\x73\xeb\xc4\x2f\x9a\x2a\xef\x83\x6f\x1a\xd5\xee\x3c\x9f\xb1\x2e\x04\x29\x69\x92\x4a\x23\x55\x51\xf6\xbf\xef\x73\x43\xd3\x89\x9f\x58\xbd\xf8\x57\x31\xea\x47\x44\xe1\x52\x3e\xe2\x30\x28\x77\x5f\xbe\xde\x13\x70\x77\xd3\x9c\x78\xf7\xfa\x94\x0c\x73\xb4\xe7\x97\x8c\xc5\x31\x8a\x81\x73\x1b\x3f\xd5\xca\x0d\x65\xd4\x9d\xb7\xe7\xdc\xc5\xaf\xfd\xf6\xdc\x32\x7b\x1e\xad\xd6\x6c\xb1\x3f\x8b\xdb\xcb\xe1\xef\x66\x70\x51\x5f\x48\xbd\xe4\x05\x14\x51\xa5\xf8\xb2\xe0\x86\xe5\x54\x19\xa7\xe1\x59\x4c\x0d\xf5\x53\xfb\x79\x47\x29\x6a\x98\x48\x5b\x37\xa5\x5b\x05\x51\x5f\x58\x55\x4d\xa4\x2c\xf9\xa1\x72\xc8\xad\x21\x2f\x56\x83\xe3\x3a\xa0\x18\x86\x08\xf7\x34\xd5\x2f\x88\x37\x34\xd5\x2f\xcb\xee\x07\x7b\x08\x64\xdb\x83\x91\xe0\xbf\x21\x7a\x02\x0f\xac\xa5\x16\x81\xd3\x10\xb9\x5f\x57\xbb\xfb\x70\xcf\xaa\x28\xc3\xe8\x21\x94\x4f\x5e\xa6\x9f\x55\xc9\xbd\xab\x6a\xba\xc7\xa4\x5b\xd5\xcf\x5d\x5a\x18\x39\x25\x0b\x18\x96\x6a\x95\xd5\x4e\xaf\x6d\xb3\xfa\x3d\xfc\x07\xc2\xf4\x91\x71\xdc\x11\xa6\x84\x71\x6c\x8c\xa9\xb2\xfc\xa3\xa3\xd8\xf2\xf1\xd6\xff\x74\x97\x1c\x94\x6e\xfb\xb2\xda\x53\xba\xf9\xe2\x3e\x63\x1a\x98\x86\xd2\x36\xd7\xfa\x81\x15\x00\xdc\x1a\x88\xa8\x80\x10\xa1\xd0\xe8\x92\x86\x46\x11\x6a\x0d\x26\x43\xcb\x16\xcc\xc6\x79\x2b\xe3\x13\x62\x0e\xcc\x80\xc6\x48\xa1\x09\x00\x5a\x02\x4d\xd0\xe3\xdc\xdd\x28\x0e\x75\x49\xaf\x1c\x98\xb1\x2e\xee\x7a\xa3\x4b\xd6\xca\x62\x9b\x49\xd6\x7e\x9a\xb3\x07\x2c\x1d\x0b\x01\x85\x34\x96\x82\x97\x73\xd2\x7c\x1d\x10\x90\xba\xb5\x4a\x71\x53\xbd\x5a\x23\x99\x97\xf7\xf8\x64\x8e\x47\x9e\xec\xd1\xc9\x54\xa1\x29\x94\x80\x84\x72\x8d\xf6\x89\x2e\xf3\xb2\x71\xa5\x77\xef\x24\x14\x12\x7a\x66\x65\x58\x68\xb6\x68\x5b\xf4\xbe\x60\xea\x48\xb1\xdc\x54\x9b\x49\x21\x5c\x4b\x85\xf6\xf5\x9c\xd3\x14\x3f\xd3\x25\x9e\x02\xf2\xa5\x30\x27\xde\xc4\xf6\x48\x15\xb0\x53\xe8\x42\xee\xbe\xed\x33\x5c\x77\x73\x95\x37\xeb\xcd\x21\x96\x51\xb1\x44\x61\x82\x14\xcd\x4f\x1c\xed\xa7\xfe\x50\xde\x58\xe5\x2d\xc6\xb1\x9f\x3e\x27\xfe\x68\xaa\xe0\x98\xc1\x1c\xce\xa7\xc0\x60\xe6\xc9\x0c\x38\x8a\xd4\x64\x53\x60\x6f\xde\xf8\xaa\xf5\x91\x7f\x67\x7f\x04\xae\xf0\x83\x7a\x9c\x84\x39\x10\x3b\x50\x92\x0e\x63\xe3\x6b\xec\x6c\x38\x50\x5f\x37\x76\xec\x57\xd6\x89\x7b\x41\x55\xc7\xd3\x29\xda\x4d\xd1\x37\x76\x2e\xb6\x0a\xef\x54\x76\x87\x86\x1f\xca\xdb\xb8\x0d\xdb\xc9\xd0\xf0\x90\xcb\xe8\xc1\x13\xe6\xe2\xfa\x2c\xec\x48\xba\x5e\x3d\xf2\x07\xf8\xf1\x18\x7e\x46\xe3\xea\x14\x2b\x4c\x70\x2f\x7c\x5b\x12\x31\x26\xb4\xe0\xe6\x4b\x6e\xef\x4f\x2a\x62\x70\xe3\x18\xd8\xc1\xcd\x1c\x35\x59\x63\x68\x08\x73\x58\x31\x11\xcb\x55\xd0\x0d\x63\x54\x67\x81\x2e\x42\x6d\xd4\xf1\xc5\x89\x63\x66\x09\x1c\x1b\x1a\xfa\xfe\x7a\xce\x62\x1b\x0b\xf2\xc6\x32\x07\x0e\xf2\xb8\x92\xb0\x01\xfb\xfc\x3f\xf0\xbc\x1b\xe7\xdb\xf3\x53\xe8\xfe\x11\x50\xd7\xc8\x91\xff\xde\x4f\xa4\x34\xbd\xff\x15\xfd\x15\x00\x00\xff\xff\xc7\xae\x41\x92\x49\x12\x00\x00")

func userTmplBytes() ([]byte, error) {
	return bindataRead(
		_userTmpl,
		"user.tmpl",
	)
}

func userTmpl() (*asset, error) {
	bytes, err := userTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user.tmpl", size: 4681, mode: os.FileMode(438), modTime: time.Unix(1580506221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _useruploadsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x4a\x04\x31\x0c\x80\xef\x7d\x8a\xd0\xbb\x5d\xd8\xe3\x3a\xf6\x24\x78\x53\xf0\xe7\x01\xa2\x4d\xb7\x85\x0e\x2d\x93\x38\x2a\x25\xef\x2e\x83\xcc\x50\x8f\x81\x2f\xdf\x97\xf4\x2e\x34\xb7\x82\x42\x60\x13\x61\xa0\xc5\xc9\xdc\x8a\x05\xa7\x6a\x0c\x00\xc0\x94\xce\xfe\xad\x95\x8a\x81\x2f\xd0\xbb\xbb\x47\x41\xf7\x22\xb8\x88\xea\xcd\x3e\x3f\xd2\xb7\x3c\xc5\xc8\x24\xaa\x50\xe3\xc1\xbd\x56\xc1\xf2\x4c\xfc\x59\x84\x55\xe1\x9a\x23\x4f\xa7\x74\xf6\x7f\xea\x31\xde\xf0\x4a\xbc\xb7\xb7\xdd\xbd\x3f\x42\x9c\xea\xd7\xe6\x18\x39\xf7\x90\x23\x1f\xc7\x86\xbc\x02\xcb\x4f\xa1\x3b\xfb\x51\x08\x97\x0b\xbc\x57\x49\xb7\xd6\x4f\xa7\x90\x57\x6f\xcc\xa8\x8b\xb5\xca\xbf\x87\x7f\x03\x00\x00\xff\xff\x5c\xeb\x50\x26\x0e\x01\x00\x00")

func useruploadsTmplBytes() ([]byte, error) {
	return bindataRead(
		_useruploadsTmpl,
		"useruploads.tmpl",
	)
}

func useruploadsTmpl() (*asset, error) {
	bytes, err := useruploadsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "useruploads.tmpl", size: 270, mode: os.FileMode(438), modTime: time.Unix(1580506629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitattributes": Gitattributes,
	"bindata.go": bindataGo,
	"error.tmpl": errorTmpl,
	"favorites.tmpl": favoritesTmpl,
	"footer.tmpl": footerTmpl,
	"gif.tmpl": gifTmpl,
	"header.tmpl": headerTmpl,
	"index.tmpl": indexTmpl,
	"pages.tmpl": pagesTmpl,
	"search.tmpl": searchTmpl,
	"showgifs.tmpl": showgifsTmpl,
	"templates.go": templatesGo,
	"user.tmpl": userTmpl,
	"useruploads.tmpl": useruploadsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitattributes": &bintree{Gitattributes, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"error.tmpl": &bintree{errorTmpl, map[string]*bintree{}},
	"favorites.tmpl": &bintree{favoritesTmpl, map[string]*bintree{}},
	"footer.tmpl": &bintree{footerTmpl, map[string]*bintree{}},
	"gif.tmpl": &bintree{gifTmpl, map[string]*bintree{}},
	"header.tmpl": &bintree{headerTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"pages.tmpl": &bintree{pagesTmpl, map[string]*bintree{}},
	"search.tmpl": &bintree{searchTmpl, map[string]*bintree{}},
	"showgifs.tmpl": &bintree{showgifsTmpl, map[string]*bintree{}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"user.tmpl": &bintree{userTmpl, map[string]*bintree{}},
	"useruploads.tmpl": &bintree{useruploadsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

