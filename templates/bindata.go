// Code generated by go-bindata.
// sources:
// .gitattributes
// bindata.go
// error.tmpl
// footer.tmpl
// gif.tmpl
// header.tmpl
// index.tmpl
// pages.tmpl
// search.tmpl
// showgifs.tmpl
// templates.go
// user.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitattributes = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\x4b\x49\x2c\x49\xd4\x4b\xcf\x57\xd0\x4d\xc9\x4c\x4b\xe3\x02\x04\x00\x00\xff\xff\xe5\xa1\x25\x74\x11\x00\x00\x00")

func GitattributesBytes() ([]byte, error) {
	return bindataRead(
		_Gitattributes,
		".gitattributes",
	)
}

func Gitattributes() (*asset, error) {
	bytes, err := GitattributesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitattributes", size: 17, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(1580505905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\x2b\xc9\x2d\xc8\x51\x52\xd0\xab\xad\xe5\xe2\xb2\x29\xb0\x0b\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\xcc\x53\x48\x2d\x2a\xca\x2f\x52\x28\x48\x4c\x4f\x55\xb4\xd1\x2f\xb0\x03\xc9\x56\x57\xeb\xb9\x24\x96\x24\xea\xf9\x16\xa7\xd7\xd6\x82\x05\xb9\x90\x4d\x4c\xcb\xcf\x2f\x41\x31\x11\x10\x00\x00\xff\xff\x68\x1e\x54\x0a\x6f\x00\x00\x00")

func errorTmplBytes() ([]byte, error) {
	return bindataRead(
		_errorTmpl,
		"error.tmpl",
	)
}

func errorTmpl() (*asset, error) {
	bytes, err := errorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.tmpl", size: 111, mode: os.FileMode(438), modTime: time.Unix(1580482281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x5c\x80\x00\x00\x00\xff\xff\x55\x33\xd2\x97\x17\x00\x00\x00")

func footerTmplBytes() ([]byte, error) {
	return bindataRead(
		_footerTmpl,
		"footer.tmpl",
	)
}

func footerTmpl() (*asset, error) {
	bytes, err := footerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl", size: 23, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gifTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xd1\x6e\xab\x38\x10\x7d\xcf\x57\x8c\xbc\xd5\x6a\x57\xda\xc0\xaa\xda\x27\x02\xec\xc3\xad\x7a\xd5\xa7\x5e\xdd\xb6\x1f\x30\xe0\x01\xac\x82\xcd\x35\x43\xda\x08\xf1\xef\x57\x10\x20\xa4\x49\xd3\xaa\x91\xaa\x56\xaa\x48\x1c\xcf\xf1\x99\x33\x73\xc6\x34\x0d\x53\x51\xe6\xc8\x04\x22\x23\x94\x64\x1d\x2e\xca\x5c\x80\xd3\xb6\x8b\x85\x2f\xd5\x1a\x2a\xde\xe4\x14\x88\x02\x6d\xaa\xf4\x92\x4d\xe9\xc1\x7f\xff\x96\xcf\x2b\x11\x2e\x00\x00\xfc\xec\x72\xdc\x92\xe4\x06\xd9\x83\x9c\x12\x5e\xc1\x76\xbf\x07\xdb\xad\x4d\xe3\x5c\x21\xa3\x73\xaf\x38\xa7\xb6\xf5\xdd\xec\x72\x08\x9f\x1d\x31\xc4\x5b\x95\x66\x3c\xc2\x77\x7f\x4d\x63\x51\xa7\x04\x03\x04\xa6\x55\xdb\x4e\x3f\xf6\x20\x08\x71\x8e\x55\x15\x08\xc6\x54\x40\x66\x29\x09\x84\x5b\x11\xda\x38\xfb\xff\x57\xc0\x98\x7a\x4d\xe3\xb4\xad\x08\xff\xe8\x9f\xbe\x8b\x73\x74\xd2\x72\x00\xf4\x5d\xa9\xd6\xe1\x62\x7c\xcc\xb8\x31\x3d\xf3\x12\x73\x95\x6a\x0f\x62\xd2\x4c\x76\x15\xe7\x84\xd6\x83\xc8\x70\xd6\xb1\xf5\x55\x91\x42\x65\xe3\x40\xb8\xa9\x4a\xdc\x31\xe3\x9b\xab\xb6\x75\x52\x95\x88\x09\x76\xe1\x47\x36\xec\xfe\x17\x8b\xa6\x51\x09\x38\x0f\x15\xd9\x4e\xee\x2d\x9b\x6e\xa5\x8f\xec\x96\x6f\x74\x62\x9c\x6b\x5c\x1b\xab\x98\xe4\xb8\xa9\xa7\x5a\x86\xfb\x1a\x24\xc6\x16\xa3\x0c\x11\x56\x2a\xee\x16\x04\x60\xcc\xca\xe8\x40\xb8\x75\x45\xd6\xad\x4b\x89\x4c\x31\x32\xa5\xc6\x2a\xaa\x04\x14\xc4\x99\x91\x81\xf8\x71\x7b\x77\x2f\xf6\x21\x7b\x58\xa5\xcb\x9a\x81\x37\x25\x05\x22\x53\x52\x92\x16\xa0\xb1\xa0\x40\xa4\x2a\x51\x52\xc0\x1a\xf3\x9a\x02\x31\xcf\xf7\x08\xce\x58\xc3\x8b\x47\xda\xfc\x03\x17\x7d\x10\x78\xc1\xcb\x54\xbf\x4d\xcc\x5e\x94\x78\xe2\x93\x63\x44\xf9\xbc\xdc\x87\x67\xed\xce\x54\xc9\x70\xd4\x2b\x68\x47\xb3\x8c\x33\x8a\x1f\x23\xf3\x3c\xe6\x19\x23\x2f\x9b\xa6\x23\xde\xb6\x62\xdf\x0e\xdb\xf6\x86\x12\xa5\x54\x3a\x1d\xbe\x3d\x29\xc9\x99\x07\x58\xb3\x59\x4d\xf2\x18\x2d\xa0\x07\x26\x19\xc2\x88\x76\x82\x39\xe5\xd5\x97\x20\xfd\x3e\xb2\x93\x81\x0e\x38\xba\x7d\xbd\x8e\xf5\xc3\xf1\xa0\xde\x73\x43\x75\xad\x79\x12\xa1\x1f\xd5\xcc\x46\x0f\x69\x56\x75\x54\x28\x16\xe1\x43\xdf\xc7\xb0\x6b\x17\xf0\xd5\x18\x96\x20\x24\xb8\x24\xd9\xed\xf3\x5d\x15\xfa\xee\x16\x22\x1c\xfc\xb7\xcf\xaf\x73\xc9\x6e\xcd\x77\x67\xb6\xfa\xa0\xc5\x74\x32\xf8\xf5\xd3\xcc\xf5\x4e\xd1\x7e\x52\x61\xd6\x04\xd7\xd6\x14\x30\xce\x94\x43\xe1\x32\x42\xcb\x4b\xf3\x41\xed\x86\x21\x36\xb4\xef\x99\x52\x7e\xba\x90\x70\x7c\xc2\xfc\xd9\xbb\x6b\x05\x23\x9f\xea\xd5\xb6\x86\xf9\x75\xd5\x4d\xb5\xb7\x27\xda\x2b\x67\x9e\x6b\x7d\xe7\x7c\xdf\x3b\xa7\x18\x9f\x56\xe0\x2c\x73\xdf\xe1\x9a\xe0\xde\xbc\xd5\xa3\x67\x76\xa8\x96\xa7\xee\xdc\xdb\x27\xdd\x5f\xca\x53\xe8\x87\x1a\x58\x52\x4e\x5f\x6f\x0e\x5c\xf5\xac\xe0\xfb\xcd\x35\xfc\xb5\x31\x35\xa0\x25\xe0\x8c\xc0\x74\x39\xff\x7d\x20\x76\x84\xfa\x8c\x41\x3a\x29\x3d\xfb\xb0\x7b\xe7\x4c\x8c\xe1\xbd\x77\xce\xdf\x01\x00\x00\xff\xff\xae\xd4\x3a\x67\x91\x0a\x00\x00")

func gifTmplBytes() ([]byte, error) {
	return bindataRead(
		_gifTmpl,
		"gif.tmpl",
	)
}

func gifTmpl() (*asset, error) {
	bytes, err := gifTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gif.tmpl", size: 2705, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\xe3\xb8\x11\xbe\xeb\x57\x20\x74\x25\xb6\xa7\x24\xd2\xf2\x58\xb3\x59\x8a\x52\xd5\xc6\xd9\xcc\x4c\x55\x0e\x9b\x9d\xdd\xaa\x54\xa5\xf6\xd0\x02\x9a\x24\xc6\x20\xc0\x00\xa0\x1e\x71\xf9\xbf\xa7\x40\x52\x14\x9f\x9e\x99\x3d\xe4\x14\x1d\x6c\x11\x8f\xee\x0f\xfd\x7d\xdd\x0d\x2a\x4a\x6d\x26\xb6\xb3\x28\x45\x60\xdb\x59\x64\xb9\x15\xb8\x7d\xcf\xf3\x14\xa1\x38\x46\x41\xf5\x3c\x8b\x04\x97\x4f\x44\xa3\xd8\x78\xc6\x9e\x04\x9a\x14\xd1\x7a\x24\xd5\x18\x6f\xbc\xd4\xda\xdc\x84\x41\x40\x99\xfc\x6c\x7c\x2a\x54\xc1\x62\x01\x1a\x7d\xaa\xb2\x00\x3e\xc3\x31\x10\x7c\x67\x82\x58\x49\xbb\x80\x03\x1a\x95\x61\xf0\xe0\x7f\xe7\xdf\x05\xd4\x74\x87\xfd\x8c\x4b\x9f\x1a\xe3\x6d\x67\x51\xe9\x67\x3b\x23\x84\x90\x9d\x62\x27\xf2\x5c\x7e\x75\x9f\x0c\x74\xc2\x65\x48\xee\xd6\xcd\x50\x69\x24\x86\x8c\x8b\x53\x48\x7e\xd0\x1c\xc4\x9c\x7c\x40\xb1\x47\xcb\x29\xcc\x89\x01\x69\x16\x06\x35\x8f\x2f\x5b\x76\x40\x9f\x12\xad\x0a\xc9\x16\x54\x09\xa5\x43\xb2\x13\x40\x9f\x2e\x0b\xea\xd1\x43\xca\x2d\x5e\x46\x2d\x1e\xed\x02\x04\x4f\x64\x48\x28\x4a\x8b\xba\x9a\x7b\x29\xff\x5e\x51\x25\x2d\x4a\x6b\x5a\x70\x19\x37\xb9\x80\x53\x48\xb8\x14\x5c\xe2\x62\x27\x54\xdb\xcd\x81\x33\x9b\x86\x64\x79\x77\xff\x90\x1f\xc7\xfd\x08\x8c\xed\x65\x26\x57\x86\x5b\xae\x64\xe8\xf8\x00\xcb\xf7\xd8\x41\x60\x55\x2e\x61\xdf\xf2\x9f\x03\x63\x5c\x26\xce\xc5\xd9\x41\x77\x29\xb4\x16\x97\x6e\x19\x52\xa5\xa1\xf2\x21\x95\xc4\xd7\x62\xd2\x33\xe5\xc7\x4a\x67\xa5\x58\xfa\x7c\x2d\xac\xca\xdb\x18\x5a\x33\xee\x7c\x21\xe9\x1c\x3f\x16\x0a\x6c\x48\x34\x4f\xd2\xf6\xd1\xcf\x47\x79\xd7\x5e\x3b\x4e\xdf\x90\x5f\x06\xfa\x29\xd1\x70\x1a\x03\x9e\x2e\x5b\x80\x4b\x35\x19\xfe\x1f\x0c\xc9\xc3\xaa\xed\xa9\x47\x65\xc7\x90\x50\x89\xfa\x1a\x1b\x17\x5c\x21\x59\x1c\x70\xf7\xc4\xed\xc2\x19\x03\xbd\x48\x34\x30\x8e\xd2\xde\x3c\xac\x18\x26\x73\x42\x4f\x20\xe7\x24\xd1\x88\x72\x4e\x4e\x28\x84\x3a\xcc\x49\x06\x09\x4a\x0b\xb7\x17\x8b\x67\x2b\xed\x13\x0b\x9e\x87\x25\x99\xc3\x65\x25\xc5\x31\x17\xe2\x1c\x17\xab\x41\x9a\x1c\x34\x4a\xdb\x39\x91\x41\xd0\x34\x75\x8a\x06\x2e\x51\x4f\x31\xba\xea\xa9\xaa\xbf\x8d\xcb\xbc\xb0\xad\xcd\xb5\xe0\xbf\x5f\x75\xa4\x90\xa2\xa3\x3a\x24\x0f\x9d\xd1\x86\xf0\xfb\xce\xf0\x4e\x69\x86\xba\x2f\xce\x56\xc8\x97\xdf\x7d\x01\xd4\xae\xb0\x56\xc9\x21\xaa\xaf\x01\xd5\x66\xf0\x8a\x31\x36\x8a\xe0\xfe\xfe\xcb\x80\x69\xa1\x8d\x23\x20\x57\x7c\x50\x48\xc6\x01\x87\xa9\xda\x77\x98\xe8\x60\xa1\x94\xb6\x6d\xf8\x75\x31\x5a\x54\xde\x9b\x5d\x2d\x9d\x70\xa7\xa6\x90\xbc\xaa\xbf\xbc\xd0\xb9\xc0\x39\xd9\x73\x25\xd0\x36\xba\x3b\xc7\xa6\x5f\x55\xfc\x1d\x18\x4e\x5d\x19\x20\xcf\x4d\xbe\x54\x35\x6f\x24\x27\xaf\x56\xab\xd5\xba\x55\xa2\x9c\x98\x2e\x05\x3e\x3f\xae\x07\x46\xd3\xfb\x91\x56\x50\x82\x98\xac\xcd\x7d\xc9\x4e\x23\xf6\xb5\x3a\x10\x3f\xe6\x28\xd8\x84\x17\xb7\x99\xac\xf2\x23\xb9\x9f\x34\x52\x0a\x7e\xde\x1e\x19\xa8\xad\x39\xf0\x6a\x58\x0e\x5b\xf8\x48\xbb\x3f\xdc\xfd\xb1\xaf\xa7\x85\xe3\xab\x30\xbd\xd2\x79\xd6\x5a\xc7\xca\x32\x3f\x12\xa3\x04\x67\xe4\x6a\xb9\x5c\xbe\x06\xfc\x5f\xf6\x94\xe3\xc6\x14\xbb\x8c\xdb\xdf\xe6\x13\xd3\xd5\x81\x7e\x7b\xfd\x90\x63\x6c\xef\xde\xad\xbb\x4d\xa4\xca\x99\x43\x2d\xa6\x9d\x12\x6c\xdd\x49\x64\x7f\x89\xd9\x7a\x90\x29\x1d\x3a\xdf\xf6\x72\x5d\xa8\x84\x4b\x07\x69\x4e\xae\x34\x26\xdc\x58\xd4\x95\x1e\x87\x85\xbc\x57\x41\x46\xbb\xce\x39\xa0\x97\x18\xf6\xee\x04\x97\x8e\x0c\x3b\xa3\x44\xd1\xb9\x2f\x0c\xbb\x5e\xcd\xe8\xbb\xbb\xce\xa8\xae\x22\xd0\xd7\xa6\x85\xe4\xf5\x90\xbe\xfd\xf3\xe3\x48\xbd\x5c\x0d\x15\xd1\xa8\x65\x54\x73\x6f\x07\x97\x8f\x6f\xb9\x05\x8c\x87\xe9\x0a\x00\xfa\xc5\xd1\xdd\xea\x42\xc2\x2d\x08\x4e\x27\x1b\xeb\xe0\x8e\xe4\x3c\x2d\x4c\x0e\x14\x1d\x96\x83\x86\x7c\x10\xa4\x29\x86\xc7\x2d\x0e\x52\xad\x6f\x69\x32\x65\xa7\x2f\x30\xcb\x89\x2e\x31\xd9\x67\xc9\x54\xb6\xd6\x1b\x84\x93\xc4\x4e\x14\x5f\xd7\x32\xfa\xd8\x87\xbd\xe2\x15\x57\x3d\x2e\x27\xdc\x44\x41\x7d\x2b\x9f\x45\x86\x6a\x9e\xdb\xea\x7e\x1e\x17\x92\x3a\x9d\x10\xaa\xf2\xd3\x2f\x78\xb4\x37\x9c\xdd\xb6\x1c\x07\x6f\xc8\x7b\xb4\xc4\xa6\x58\x2a\x8b\x54\xf5\xf5\x4d\xd0\x2c\xd8\x83\x6e\xf6\x92\x0d\x61\x8a\x16\x19\x4a\xeb\x27\x68\x7f\x14\xe8\xbe\xfe\xe5\xf4\x91\x39\xab\xeb\xd9\xac\xb1\xf9\x09\x05\xd2\x69\xb3\x67\x83\xbe\x29\xd7\xdd\x34\x9d\xab\x35\x61\x2b\x1b\x5c\xc9\x9f\x41\x26\x78\x73\x37\x27\xdf\xbb\xcf\xed\x9a\x04\x6f\xfe\xa6\x34\xc9\xd4\x8e\x0b\x24\x0c\xf7\x9c\xa2\x79\x13\xb4\xdc\x3f\xaa\xfc\x74\x71\xce\xa5\xe1\x0c\x27\xc1\x34\x47\xc2\x23\xd2\x47\x95\x65\x20\xd9\x8d\xe7\x90\x78\x0d\x2e\x8d\xb6\xd0\x92\xc4\x20\x0c\xb6\x22\x5e\x07\x7a\x16\x05\xf5\x3b\x9a\x7b\x1d\xda\xce\x22\xc6\xf7\x84\xb3\x8d\x77\x7e\xe5\xf0\x2a\x32\x9a\xf1\xa6\x0c\xd6\x13\xe5\x64\xa9\x0f\x2a\xc0\x98\x8d\xd7\x94\x6e\x8f\x40\x19\x83\x8d\x17\x94\x9b\x3c\x92\xa1\x4d\x15\xdb\x78\xb9\x32\xb6\xb5\xbd\x34\x91\xde\x6f\xff\xae\x12\xf2\x51\x46\x41\x7a\xdf\x9b\x73\xbe\x6b\xeb\x5a\x1d\xbc\x6d\x7b\xa0\x8c\x88\xb7\xfd\xd5\xa0\x96\x90\x61\x14\x30\xbe\xdf\x46\xd5\xed\xb0\x6c\x2a\x9e\x0b\x9c\x47\xdc\xe4\xc6\x2b\xea\x65\xde\xe5\x2c\xcd\xd0\xb6\xda\xfb\xcd\xae\x7f\x02\x63\x0e\x4a\xb3\x11\xd7\x79\x3d\x75\x76\xdf\x3c\xff\x5e\x5f\x9f\xca\x06\x3a\xe2\xa9\xea\xac\x1e\xd9\x83\x28\x70\xe3\x55\xa1\x24\x7f\xd2\xa0\xf5\xfa\xec\xbd\x5e\xd3\xf7\x1d\x05\x8e\xad\x9a\xe6\xcb\x54\xc3\x78\xbb\xd9\x7d\x0b\xe9\xe7\x7d\x5f\xe4\xfd\x51\x23\x58\x24\x8e\xc2\xff\x21\xf9\x67\x78\xff\xe7\xff\x0b\xfc\x57\xef\xb2\x6d\xe6\xd3\xe5\x36\x82\xfa\x67\x9a\xc0\xdb\x46\xfc\x9c\x4d\xca\x6b\xf0\x02\x89\x61\x41\x21\x43\x0d\x0b\x8d\x56\x2b\xe7\x97\x6f\xc9\xfb\x8f\x3f\x7d\xf8\xe1\xd7\x7f\x46\x01\x6c\xa3\x20\x5d\x5e\xac\x3e\x3f\xf3\x98\xf8\x8e\xca\x97\x97\x6e\x5c\x1a\x57\xbb\x13\x5e\x1c\xd4\xbf\x08\x78\xae\x6c\xa8\xc2\x3a\x83\x13\xdb\x1c\xc3\xc1\xc8\xc6\x0f\x2a\xc3\x90\x3c\x3f\x97\x4e\xfd\xb3\x88\x5e\x5e\x3a\xa6\x9e\x9f\x51\x18\x1c\x42\xea\x5b\x23\x4a\x3e\x0a\x4e\x9f\x36\xde\x67\xd8\x43\x55\x5e\xc3\x5e\xa7\xb9\x6e\x8a\xe7\xf5\xad\x5f\xf6\x3c\xbf\xbe\x50\x6c\xae\xcb\x9b\xc4\xf5\x7a\x74\xc7\x59\xa2\xd7\xb7\x7e\xac\x68\x61\x6e\x6e\xd7\x5e\x53\x2d\x87\xc7\xfe\x5d\xd0\xda\x59\x3e\x89\x6e\x00\xaf\x9f\x44\x1d\x84\x3f\xd7\x93\xfd\x78\x4a\x56\x87\xb3\xaf\xb6\x1a\x78\xf7\x05\xb3\xa3\xd7\x46\x94\xbd\x17\xd9\x41\x5d\x6a\xaa\x50\xb5\xf0\x52\x83\xde\xff\xf8\x4b\xbf\x04\x55\x79\x54\xe5\xc8\xbf\xbd\x4e\xe1\xc8\x05\x50\x4c\x95\x60\xa8\x37\xde\xa7\xd2\x94\xbb\x0c\x91\x84\xc7\x86\x80\x64\xc4\xd8\x22\x8e\xff\xd0\xe4\x5d\x25\xe2\xbf\x82\x85\x97\x97\xea\xfb\x3f\x0a\xd4\x27\xf7\x50\x8e\x5e\x1e\xcb\x28\xd4\xff\xfa\x80\xea\x5b\x62\x27\xb3\x5d\x96\x75\x72\xab\x3e\x58\x99\x55\x51\x50\x6d\x79\x35\xa9\xff\x1b\x00\x00\xff\xff\x4e\x00\x87\xd1\x94\x15\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 5524, mode: os.FileMode(438), modTime: time.Unix(1580482281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\x2b\xc9\x2d\xc8\x51\x52\xd0\xab\xad\xe5\xe2\xb2\xc9\x30\xb6\x0b\x29\x4a\xcd\x4b\xc9\xcc\x4b\xb7\xd1\xcf\x30\xb6\xe3\xe2\x42\xd6\x50\x9c\x91\x5f\x9e\x9e\x99\x56\x0c\xd3\xe2\x92\x58\x92\xa8\xe7\x9c\x58\x92\x9a\x9e\x5f\x94\x99\x5a\xac\x07\xd3\x0a\x33\x2a\x28\x35\x39\x35\xaf\x44\x21\xb4\x20\x27\x3f\x31\xa5\x98\x0c\x03\xa1\x3a\x41\xe6\x21\x6b\x4b\xcb\xcf\x2f\x41\x71\x38\x20\x00\x00\xff\xff\xcf\xe5\x6d\xa6\xd6\x00\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 214, mode: os.FileMode(438), modTime: time.Unix(1580505856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x50\x50\x50\xb0\x49\x54\xc8\x28\x4a\x4d\xb3\x55\xb2\xcf\x4f\x4b\x2b\x4e\x2d\xb1\x35\x50\x2b\xb4\xad\xae\xd6\x0b\x2c\x4d\x2d\xaa\xac\xad\x55\xb2\x0b\x2e\x49\x2c\x2a\xb1\xd1\x4f\xc4\xa1\xbc\xba\x5a\x2f\xa0\x28\xb5\xcc\x1f\xcc\xab\xad\x45\xd3\x0c\x92\xc2\xab\xd7\x2f\xb5\xa2\x04\x87\x5e\x90\x14\x58\xaf\x8d\x3e\xd8\xb5\x80\x00\x00\x00\xff\xff\xcf\x30\xf3\xde\xb4\x00\x00\x00")

func pagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_pagesTmpl,
		"pages.tmpl",
	)
}

func pagesTmpl() (*asset, error) {
	bytes, err := pagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages.tmpl", size: 180, mode: os.FileMode(438), modTime: time.Unix(1580504362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _searchTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x21\x77\xb3\xb0\xc7\xb5\xe6\x24\x78\x53\x70\x7d\x81\x71\x3b\x69\x02\x29\x29\x99\xb1\x2a\x61\xde\x5d\x8a\xb6\xc4\xe3\xc0\xf7\xff\xf3\xfd\xad\x09\xcd\x4b\x46\x21\xb0\x91\x70\xa4\xea\x64\x5e\xb2\x05\xa7\x6a\x0c\x00\xc0\x10\xcf\xfe\x4a\x58\x6f\x11\x5e\x89\x3f\xb2\xf0\x05\x5a\x73\x8f\x28\xe8\xae\x82\x55\x54\xef\xf6\xfb\x99\xbe\xe4\x25\x04\x26\x51\x85\x12\x0e\xee\xad\x08\xe6\xbf\xb4\x2a\x4c\x29\xf0\x70\x8a\x67\xff\xfb\xa1\x77\x58\x70\x22\xde\x15\xb6\xec\xae\xd1\x43\x1c\xcb\xe7\xd6\xd1\x73\xee\x29\x05\x3e\x9c\xc7\xb4\x02\xcb\x77\xa6\x07\x7b\xcb\x84\xf5\x02\xef\x45\xe2\xbd\xf5\xc3\x69\x4c\xab\x37\xa6\xaf\x0b\xa5\xc8\xbf\xdd\x3f\x01\x00\x00\xff\xff\xf6\xaf\xbc\xa7\x15\x01\x00\x00")

func searchTmplBytes() ([]byte, error) {
	return bindataRead(
		_searchTmpl,
		"search.tmpl",
	)
}

func searchTmpl() (*asset, error) {
	bytes, err := searchTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "search.tmpl", size: 277, mode: os.FileMode(438), modTime: time.Unix(1580504572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _showgifsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x4d\x6e\xeb\x20\x1c\xc4\xf7\xef\x14\x23\xb2\xb6\x9d\xf8\xc9\x1b\xec\x78\xd3\x6e\x7a\x0c\x62\x30\xfe\xab\x04\x10\xa6\xa9\x2b\xc4\xdd\xab\xfa\xa3\xad\xca\x6e\x66\x04\xcc\x6f\x00\x20\xa5\x20\xac\x56\x28\x91\xf3\x3f\xec\xa7\x93\xf4\xc0\x1c\x3f\x8c\xba\xb2\x49\x91\x9e\x22\xc7\xff\xf3\xd9\x2f\x2d\xde\x49\xc6\x89\xa3\x6e\x56\x75\x13\xc3\xab\x0e\xee\xcd\xca\x62\x70\xc6\x05\x8e\x53\x5d\xd7\x2d\xa2\x5a\x62\x21\x0c\x69\xcb\x31\x28\x1b\x55\x68\xe1\x85\x94\x64\x35\xc7\x65\xbd\x7a\x17\x41\x93\xe5\x68\xd6\x77\x5c\x90\x2a\x70\x5c\xfc\x82\xd9\x19\x92\x38\x35\x4d\xd3\x62\x34\x4e\x44\x0e\xa3\xc6\xd8\xb2\xfe\xbb\xdf\xda\x51\x60\x0a\x6a\xbc\xb2\x4a\xd3\x38\x57\x29\x95\x2f\xcf\x39\xb3\xbe\xa3\xbb\xc6\x1c\x86\x2d\x38\xfc\x52\xd3\xc8\x0e\xa4\xbb\x58\x8a\x83\xe3\xbc\x97\x59\x8a\x03\x74\xb3\x58\xdf\x55\xe2\xcf\x8f\xbe\x4f\xa9\x7c\x12\x3e\x92\xb3\x39\x77\x95\xff\xc9\xbb\x4a\xd2\x63\x93\x29\x29\x2b\xf7\x31\x7f\x0f\x39\x18\x25\x02\xc7\xcd\xc5\xe9\x8b\xe5\x33\x00\x00\xff\xff\x3f\x7f\x90\x8d\x7d\x01\x00\x00")

func showgifsTmplBytes() ([]byte, error) {
	return bindataRead(
		_showgifsTmpl,
		"showgifs.tmpl",
	)
}

func showgifsTmpl() (*asset, error) {
	bytes, err := showgifsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "showgifs.tmpl", size: 381, mode: os.FileMode(438), modTime: time.Unix(1580500343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\x9b\x40\x10\x85\x6b\xf6\x57\x4c\xa8\x96\x88\xc3\xbd\x23\x17\x69\x52\x25\xa7\x14\xe9\x4e\xa7\x68\x0c\x03\x5e\x79\xd9\x45\x33\x8b\x22\xcb\xe2\xbf\x47\xb3\x80\x9d\x74\xd7\x50\xbc\x79\xfb\xcd\x7b\xc3\x84\xed\x15\x07\x82\x44\xe3\xe4\x31\x91\x18\xe3\xc6\x29\x72\x02\x6b\x8a\xf2\x92\x46\x7f\xd8\x47\xa5\xa9\x8c\x39\x1c\x86\x78\x1c\x28\x10\x63\x22\x18\xe2\xcb\xd9\x85\x0e\x13\xc2\xcb\x74\x1d\x9e\x14\x68\xd4\x0a\xdf\x23\x76\xbf\x1e\xda\x84\x2c\x24\x80\xde\xff\x63\xec\x39\x8e\xb0\x03\x3b\xd8\x71\x18\x3a\x60\x4a\x33\x07\x81\x74\xa1\x11\x50\x00\x41\x66\x97\xa8\x31\xfd\x1c\xda\xff\xd9\xb6\x02\xfb\x79\x87\x36\xbb\x5c\x03\x31\x47\xae\xe0\x6e\x0a\x7d\xf3\x03\x27\x38\x9e\x60\xc4\xe9\x4d\x12\xbb\x30\xbc\xbb\x90\x88\x7b\x6c\xe9\xbe\xdc\x4d\x51\x94\x6d\x0c\x09\x5d\x90\xf2\x08\xfa\xc0\x06\xa2\xce\x13\xac\xee\x1a\x2e\x78\x93\x84\xed\x15\xde\xde\x57\xa9\x82\x73\x8c\x5e\xf9\x45\xd1\x47\x86\xdf\x35\x88\xae\x60\x0c\x03\x3d\xed\x79\x5e\xb8\x1e\x36\xde\xe9\x04\xb2\x89\xc5\xda\x12\x12\xcf\x94\x85\xc5\xec\x9f\x6d\xd2\xa3\x17\x1d\x2d\xb5\x51\x9d\x63\x4c\xba\xe2\xd1\xf6\x95\xfe\xd8\xf2\x50\x56\xcd\xb7\x39\xb4\x62\xb7\xa2\x95\x79\x04\xe2\xf6\x19\xe9\xab\x08\xa5\x57\x1c\xf3\xc9\x34\x81\xeb\xe1\x1c\xbb\x5b\x3e\x95\xda\xb2\xc1\x0a\xb7\xd5\x97\x2c\x7d\x3a\x41\x70\x5b\xc3\x2d\x50\x70\x3e\xdb\x35\x13\x90\x17\x02\xd7\xeb\xa2\x8d\xa0\x01\x73\x28\x85\x34\x3f\xf5\xa7\xdb\xf5\x5a\x56\x37\x55\x1f\x03\xaf\x5d\x57\x5d\x89\xb5\x4e\xcd\x62\xfe\x06\x00\x00\xff\xff\x38\x6a\x1f\xdb\xb1\x02\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 689, mode: os.FileMode(438), modTime: time.Unix(1580334779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdc\xba\x11\x7e\xf7\xaf\x98\x32\x69\xd7\x46\x6c\xad\xed\xc0\x75\xb0\x17\x15\x89\xdb\xb4\x46\x80\xc4\x40\x1c\xa0\x45\xd1\x07\x4a\x1a\x49\x84\xb9\xa4\x42\x52\x5e\xab\xc6\xfe\xf7\x03\x52\x37\x6a\xb5\x5e\x2f\x72\x70\xfc\xb2\xe2\x70\x38\xdf\xdc\xc9\xf1\xf3\xb3\xc1\x55\xc1\xa9\x41\x20\x39\xd2\x04\x55\x60\x56\x05\x27\x10\x6c\x36\x47\x47\x0b\x6d\x2a\x8e\xe1\x11\x00\x40\x60\x68\xc4\x99\x78\x80\x67\xb7\xb4\x7f\x11\x8d\x1f\x32\x25\x4b\x91\x9c\xc5\x92\x4b\x35\x83\x37\x57\x57\x57\xf3\x6e\xbf\x21\xae\x73\x66\xb0\xa7\xa6\x5c\x52\x33\x03\x8e\xa9\xe9\x89\x91\x54\x09\xaa\x19\x08\x29\x3c\x56\x59\x1a\xce\x04\x6e\x93\xe3\x52\x69\x2b\xb8\x90\x4c\x18\x54\xfd\x46\x41\x93\x84\x89\x6c\x06\x17\xe7\xc5\x53\x4f\x5e\x51\x95\x31\x31\x83\xf3\xe2\x09\xae\x8a\x27\xf7\x3b\x60\x48\xa5\x30\x67\x9a\xfd\x1f\x67\x70\x71\xed\x6f\xac\x59\x62\xf2\x19\x5c\x7c\xf8\x73\x4d\xdb\x0c\x5c\x31\xcb\xe5\x23\xaa\xfd\x0e\xb9\xbe\xbe\xde\x3e\x1a\x4b\x61\x50\x18\xef\xdc\x6e\x47\x25\x4c\x17\x9c\x56\xdb\xd6\x77\x46\x5e\x0e\x6c\x68\x3d\xf8\xbe\x78\x02\x2d\x39\x4b\xb6\x82\xb1\x62\xe2\x2c\x47\x96\xe5\x66\x06\x57\xe7\x83\xa3\x31\x47\xaa\x66\x10\x49\x93\xb7\xba\x2e\xa6\x4d\xe8\x8f\x16\x09\x7b\xac\x33\x60\x11\x95\xc6\x48\x01\x2c\x59\x12\x43\xa3\x7f\xc9\x15\x12\x88\x39\xd5\xda\xad\xad\x47\x08\x48\x11\x73\x16\x3f\x2c\x89\x2c\x50\xdc\xd1\x0c\x8f\x27\x96\xf1\x9e\x46\x93\x53\x30\x39\xd3\x27\x73\x2e\x63\x6a\x98\x14\x41\xae\x30\x5d\x4e\xde\xd8\xfd\xc9\x9c\x84\xf6\x77\x31\xad\x41\x76\x22\xde\x50\x83\x99\x54\x0c\xf5\x41\xb8\x3d\xfb\x3e\xf4\x9e\xcb\xea\xd0\xaf\xf6\x6a\xf2\xa3\xe0\x92\x26\x07\x69\x51\xb3\xee\xd3\xa0\xe6\xb0\xe8\xf5\x17\x7c\xc5\xf5\x5e\xf4\x8f\x77\xb7\x5f\xb0\x3a\x08\xbd\x66\xdd\x87\x5e\x73\x58\xf4\x8f\x77\xb7\xf0\x05\xab\x1e\x7a\x31\x75\xb1\x77\x29\xe0\xb0\x9b\x48\xfa\xc8\x4d\x32\x93\x46\xd1\xfc\x7d\xb8\xa0\xe0\x44\x93\x69\xa9\x51\x4d\x4b\x67\x93\x6e\x8d\xd3\x8b\x29\x0d\x17\xd3\xfc\x7d\x7d\xc0\xef\x3f\x3a\x97\xeb\x8c\xa5\xba\xed\x40\x7f\xa7\x86\x06\x7d\x40\x82\x46\xc0\x66\xf3\x12\x54\x4a\x1f\xa5\x62\x06\x35\x09\x3f\xb7\x9f\xbf\x0e\xd7\x89\x68\x00\x9f\x9f\x15\x15\x19\xc2\xdb\x07\xac\x4e\xe1\xed\x23\xe5\x25\xc2\x6c\x39\x3a\xd8\xb0\xd7\x47\xd6\xcc\xe4\xee\x84\x47\xad\x77\x58\x0a\xf8\x13\x02\x20\x8d\x59\x04\x46\x2c\xc8\x35\x6e\x11\xb7\xce\x76\x3a\x92\x9d\x7c\x2f\x08\x18\xbb\x2f\xae\xb5\xaf\xa6\xcf\xcf\xc1\x66\x43\x42\xf7\x33\x74\xdd\x58\xfa\x8b\xae\xac\x7d\xb3\x5b\x23\x91\x8c\xcd\x1c\xd0\xfc\x75\xfb\x3d\x4a\xc4\x41\x69\xef\x49\xc7\x54\xaa\x55\xbb\x1b\x51\xcd\x62\x4b\x20\x40\x63\x5b\x01\x6d\xda\xd0\x24\x69\xed\x27\xb0\x42\x93\xcb\x64\x49\x0a\xa9\x5b\x29\xb5\xbb\x2e\xc3\x8f\x49\x02\x14\x04\xae\xa1\x65\xff\xd3\x62\x9a\x5f\x7a\x4c\x56\xbd\x06\x4d\xc9\x35\x09\x7d\x42\xca\x90\x27\x5d\x83\xa9\x6a\x93\x16\x4c\x14\xa5\x01\x53\x15\xb8\x24\x06\x9f\x0c\x01\x41\x57\xb8\x24\x9d\x42\x61\x63\xfb\xcb\x18\xbe\x08\x5d\x46\x2b\x66\x08\xb8\x00\x2c\xc9\x77\xb7\x84\xbf\xbc\xf9\xf0\xd7\x0f\x97\xf3\x81\xac\xc5\xd4\xba\xa2\xad\xda\xcb\xf0\x3f\xb2\x54\xd0\xbb\x75\xe6\xd7\x4c\x9d\xf7\xc1\x0f\x8d\x6a\x77\x9e\x2f\x58\x1f\x82\x8c\xb4\x49\xa5\x91\xaa\x38\xff\xdb\xcf\xa5\xa1\xd9\xcc\x4f\xac\x41\xfc\xeb\x18\x0d\x23\xa2\x70\x25\x1f\x71\x1c\x94\xbb\x6f\xdf\xef\x09\xb8\x9b\x69\x49\xbc\x5b\x7d\x4e\xc6\x39\x3a\xf0\x4b\xce\x92\x04\xc5\xc8\xb9\xad\x9f\x1a\xe5\xc6\x32\x9a\xbe\x3b\x70\x6e\xf8\xef\x61\x73\xee\x98\x3d\x8f\xd6\x6b\x16\xee\xcf\xe2\xee\x6a\xf8\xbd\x19\x5c\x36\xd7\xd1\x20\x79\x01\x45\x5c\x2b\xbe\x2a\xb9\x61\x05\x55\xc6\x69\x78\x96\x50\x43\xfd\xd4\x7e\xd9\x51\x8a\x1a\x26\xb2\xce\x4d\xd9\x56\x41\x34\xd7\x55\x5d\x13\x19\x4b\x7f\xa9\x1c\x0a\x6b\xc8\xab\xd5\xe0\xb8\x0e\x28\x86\x31\xc2\x3d\xcd\xf4\x2b\xe2\x0d\xcd\xf4\xeb\xb2\x87\xc1\x1e\x03\xd9\xf6\x60\x24\xf8\x2f\x88\x81\xc0\x03\x6b\xa9\x43\xe0\x34\x42\xee\xd7\xd5\xee\x3e\x3c\xb0\x2a\xce\x31\x7e\x88\xe4\x93\x97\xe9\x67\x75\x72\xef\xaa\x9a\xfe\x29\xe9\x56\xcd\x63\x97\x96\x46\xce\x49\x08\xe3\x52\xad\xb3\xda\xe9\xb5\x6d\xd6\xb0\x87\xff\x42\x98\x3e\x33\x8e\x3b\xc2\x94\x32\x8e\xad\x31\x75\x96\x7f\x76\x14\x5b\x3e\xde\xfa\x8f\xee\x92\xa3\xd2\xed\xde\x55\x7b\x4a\xb7\x08\xef\x73\xa6\x81\x69\xa8\x6c\x73\x6d\x9e\x57\x01\xc0\xad\x81\x98\x0a\x88\x10\x4a\x8d\x2e\x69\x68\x1c\xa3\xd6\x60\x72\xb4\x6c\xc1\x62\x5a\x74\x32\xbe\x20\x16\xc0\x0c\x68\x8c\x15\x9a\x00\xa0\x23\xd0\x14\x3d\xce\xdd\x8d\xe2\x50\x97\x0c\xca\x81\x19\xeb\xe2\xbe\x37\xba\x64\xad\x2d\xb6\x99\x64\xed\xa7\x05\x7b\xc0\xca\xb1\x10\x50\x48\x13\x29\x78\xb5\x24\xed\xd7\x01\x01\x69\x5a\xab\x14\x37\xf5\x9b\x35\x96\x45\x75\x8f\x4f\xe6\x78\xe2\xc9\x9e\x9c\xcc\x15\x9a\x52\x09\x48\x29\xd7\x68\x1f\xe8\xb2\xa8\x5a\x57\x7a\xf7\x4e\x4a\x21\xa5\x67\x56\x86\x85\x66\x61\xd7\xa2\xf7\x05\x53\xc7\x8a\x15\xa6\xde\x4c\x4b\xe1\x5a\x2a\x74\x6f\xe7\x82\x66\xf8\x95\xae\xf0\x14\x90\xaf\x84\x39\xf1\xe6\xb5\x47\xaa\x80\x9d\x42\x1f\x72\xf7\x6d\x1f\xe1\xba\x9f\xaa\xbc\x49\x6f\x09\x89\x8c\xcb\x15\x0a\x13\x64\x68\xfe\xc1\xd1\x7e\xea\x4f\xd5\x8d\x55\xde\x62\x1c\xfb\xe9\x73\xe2\x0f\xa6\x0a\x8e\x19\x2c\xe1\x7c\x0e\x0c\x16\x9e\xcc\x80\xa3\xc8\x4c\x3e\x07\xf6\xee\x9d\xaf\xda\x10\xf9\xbf\xec\x7f\x81\x2b\xfc\xa0\x19\x26\x61\x09\xc4\x8e\x93\xa4\xc7\xd8\xf8\x1a\x3b\x1b\x0e\xd4\xd7\x0d\x1d\xfb\x95\x75\xe2\x5e\x51\xd5\xf1\xf4\x8a\xf6\x33\xf4\x8d\x9d\x8a\xad\xc2\x3b\x95\xdd\xa1\xe1\xa7\xea\x36\xe9\xc2\x76\x32\x36\x3c\xe2\x32\x7e\xf0\x84\xb9\xb8\xbe\x08\x3b\x91\xae\x57\x4f\xfc\xf1\x7d\x3a\x85\x7f\xa2\x71\x75\x8a\x35\x26\xb8\x17\xbe\x2d\x89\x04\x53\x5a\x72\xf3\xad\xb0\xf7\x27\x15\x09\xb8\x61\x0c\xec\xd8\x66\x8e\xda\xac\x31\x34\x82\x25\xac\x99\x48\xe4\x3a\xe8\x47\x31\xaa\xf3\x40\x97\x91\x36\xea\xf8\xe2\xc4\x31\xb3\x14\x8e\x0d\x8d\x7c\x7f\xbd\x64\xb1\x8d\x05\x79\x67\x99\x03\x07\x79\x5c\x4b\xd8\x80\x7d\xfe\x1f\x78\xde\x0d\xf3\xdd\xf9\x39\xf4\xff\x06\x68\x6a\xe4\xc8\x7f\xef\xa7\x52\x9a\xc1\x7f\x8a\x7e\x0b\x00\x00\xff\xff\x57\x70\xf9\x4f\x47\x12\x00\x00")

func userTmplBytes() ([]byte, error) {
	return bindataRead(
		_userTmpl,
		"user.tmpl",
	)
}

func userTmpl() (*asset, error) {
	bytes, err := userTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user.tmpl", size: 4679, mode: os.FileMode(438), modTime: time.Unix(1580503523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitattributes": Gitattributes,
	"bindata.go": bindataGo,
	"error.tmpl": errorTmpl,
	"footer.tmpl": footerTmpl,
	"gif.tmpl": gifTmpl,
	"header.tmpl": headerTmpl,
	"index.tmpl": indexTmpl,
	"pages.tmpl": pagesTmpl,
	"search.tmpl": searchTmpl,
	"showgifs.tmpl": showgifsTmpl,
	"templates.go": templatesGo,
	"user.tmpl": userTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitattributes": &bintree{Gitattributes, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"error.tmpl": &bintree{errorTmpl, map[string]*bintree{}},
	"footer.tmpl": &bintree{footerTmpl, map[string]*bintree{}},
	"gif.tmpl": &bintree{gifTmpl, map[string]*bintree{}},
	"header.tmpl": &bintree{headerTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"pages.tmpl": &bintree{pagesTmpl, map[string]*bintree{}},
	"search.tmpl": &bintree{searchTmpl, map[string]*bintree{}},
	"showgifs.tmpl": &bintree{showgifsTmpl, map[string]*bintree{}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"user.tmpl": &bintree{userTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

